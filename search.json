[{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An introduction to `resampling`","text":"resampling helpful package providing easy way take repeated samples (.e. subsets elements) population, defined complete set subjects interest. Resampling can used different purposes, including estimation sampling distribution estimator, validation predictive models machine learning. article, show main functions resampling quick example. information, see: Sampling without replacement Sampling replacement Resampling without replacement Resampling replacement","code":""},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"An introduction to `resampling`","text":"Firstly, need load resampling needed R packages:","code":"#resampling library(resampling)  #Packages for visualisation require(ComplexHeatmap, quietly = TRUE) require(grid, quietly = TRUE) require(RColorBrewer, quietly = TRUE)"},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"seed","dir":"Articles","previous_headings":"","what":"Seed","title":"An introduction to `resampling`","text":"Now want set seed random number generation (RNG). fact, different R sessions different seeds created current time process ID default, consequently different simulation results. fixing seed ensure able reproduce results vignette. can specify seed calling ?set.seed.","code":"#Set a seed for RNG set.seed(   #A seed   seed = 5381L,                   #a randomly chosen integer value   #The kind of RNG to use   kind = \"Mersenne-Twister\",      #we make explicit the current R default value   #The kind of Normal generation   normal.kind = \"Inversion\"       #we make explicit the current R default value )"},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"sampling-methods","dir":"Articles","previous_headings":"","what":"Sampling Methods","title":"An introduction to `resampling`","text":"list currently supported sampling methods available ?listAvailableSamplingMethods function call, returns table two columns: id: id sampling method, used function calls name: name sampling method","code":"#list sampling methods sampling.methods = listAvailableSamplingMethods()  #print in table knitr::kable(x = sampling.methods)"},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"sampling-functions","dir":"Articles","previous_headings":"","what":"Sampling Functions","title":"An introduction to `resampling`","text":"name sampling functions can retrieved calling ?listSamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?balancedSampleWithoutReplacement. documentation, can see function accepts three arguments input: strata: vector stratification variables n: sample size prob: optional vector probabilities obtaining strata elements Let’s draw sample.","code":"#list sampling function names sampling.function.names = listSamplingFunctionNames()  #print in table knitr::kable(x = sampling.function.names) #See documentation ?balancedSampleWithoutReplacement #Balanced sample without replacement balancedSampleWithoutReplacement(   strata = c(rep(\"a\", 3),rep(\"b\", 6)),   n = 6 ) #> [1] 5 1 7 2 3 6"},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"resampling-functions","dir":"Articles","previous_headings":"","what":"Resampling Functions","title":"An introduction to `resampling`","text":"name resampling functions can retrieved calling ?listResamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?repeatedStratifiedSampleWithoutReplacement. documentation, can see function takes repeated stratified samples without replacement population repeatedly calling ?stratifiedSampleWithoutReplacement sampling function. ?stratifiedSampleWithoutReplacement help page reports function implements -called “proportionate allocation”, proportion strata population maintained samples. ?repeatedStratifiedSampleWithoutReplacement accepts 4 arguments input: k: number repeated samples generate strata: vector stratification variables n: sample size prob: optional vector probabilities obtaining strata elements Let’s draw 3 samples. can double-check proportion strata population maintained samples:","code":"#list resampling function names resampling.function.names = listResamplingFunctionNames()  #print in table knitr::kable(x = resampling.function.names) #See documentation ?repeatedStratifiedSampleWithoutReplacement #Stratified random samples repeatedStratifiedSampleWithoutReplacement(   k = 3,   strata = c(rep(\"a\", 3),rep(\"b\", 6)),   n = 6 ) #> [[1]] #> [1] 3 7 9 1 8 6 #>  #> [[2]] #> [1] 4 7 5 2 9 1 #>  #> [[3]] #> [1] 9 3 4 7 2 8 #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Stratified random sample i = repeatedStratifiedSampleWithoutReplacement(   k = 2,   strata = strata,   n = 3 )  #Check indices i #> [[1]] #> [1] 5 3 4 #>  #> [[2]] #> [1] 5 3 4  #Check ratio table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         a         b  #> 0.3333333 0.6666667 table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"resample-function","dir":"Articles","previous_headings":"","what":"resample Function","title":"An introduction to `resampling`","text":"Instead using different resampling functions, can use ?resample provides unique interface various resampling methods. parameters input : x: either integer representing population size, vector stratification variables n: either sample size number elements holdout k: number repeated samples generate. used number folds k-fold sampling method: one supported sampling techniques. See ?listAvailableSamplingMethods prob: (optional) vector probability weights obtaining elements population. provided, length must match population size undersample: logical, whether remove elements population order try obtain balanced data function returns object class ?resampling, represents series samples repeatedly taken population.","code":""},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"resampling-s3-class","dir":"Articles","previous_headings":"","what":"resampling S3 Class","title":"An introduction to `resampling`","text":"resampling class represents series samples repeatedly taken population. resampling object list consisting 4 elements: method: id used sampling method N: size population samples taken. Elements population index 1 N removed: (optional) vector indices elements removed population taking samples samples: list samples repeatedly taken population. element list integer vector containing indices elements sampled population Functions facilitate access data stored resampling object available: ?getSamplingMethodId: returns sampling method id ?getPopulationSize: returns population size ?getRemovedElements: returns indices elements removed population ?getNumberOfSamples: returns number taken samples ?getSamples: returns list samples ?getSampleSize: returns vector integer values, size sample ?getHoldOutSample: returns list item integer vector containing indices elements sampled population ?getHoldOutSampleSize:returns vector integer values, size hold-sample Two useful functions print plot: ?print.resampling: print summary resampling object ?plot.resampling: plot samples taken population heatmap","code":""},{"path":"https://alebarberis.github.io/resampling/articles/resampling.html","id":"take-repeated-samples","dir":"Articles","previous_headings":"","what":"Take Repeated Samples","title":"An introduction to `resampling`","text":"Now let’s use ?resample function take repeated samples population 9 elements made 2 groups (group group b). example, want use stratified sampling without replacement. look table returned ?listAvailableSamplingMethods, can see id stratified sampling without replacement stratified_rswor. can use value method argument ?resample: can check returned object class resampling: Now, print summary: can use ?getSamples extract taken samples resampling object: holdout data can obtained using ?getHoldOutSamples: can also plot object heatmap:","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6)) #Random sampling without replacement obj = resample(   x = strata,   n = 6,   k = 2,   method = \"stratified_rswor\" ) #Is obj of class `resampling`? is.resampling(obj) #> [1] TRUE #Print print(obj) #>  #> 2 samples taken from a population of 9 elements by using stratified #> random sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 3, 5, 8, 2, ...          6           3 #> 2            2 1, 8, 4, 3, ...          6           3 #Samples getSamples(obj) #> [[1]] #> [1] 3 5 8 2 6 4 #>  #> [[2]] #> [1] 1 8 4 3 7 6 #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 1 7 9 #>  #> [[2]] #> [1] 2 5 9 #Plot plot(   x = obj,    strata = strata )"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"introduction","dir":"Articles > Sampling","previous_headings":"","what":"Introduction","title":"Resampling Without Replacement","text":"Sampling without replacement implies elements population can chosen one sample. different techniques sampling without replacement, including: simple random sampling random sampling unequal probabilities stratified sampling balanced sampling (special case stratified sampling) permutation sampling k-fold sampling leave-p-sampling article, show draw repeated samples without replacement population using functions implemented resampling. information sampling techniques, see Sampling without replacement.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"loading","dir":"Articles > Sampling","previous_headings":"Setup","what":"Loading","title":"Resampling Without Replacement","text":"Firstly, need load resampling needed R packages:","code":"#resampling library(resampling)  #Packages for visualisation require(ComplexHeatmap, quietly = TRUE) require(grid, quietly = TRUE) require(RColorBrewer, quietly = TRUE)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"seed","dir":"Articles > Sampling","previous_headings":"Setup","what":"Seed","title":"Resampling Without Replacement","text":", set seed random number generation (RNG). fact, different R sessions different seeds created current time process ID default, consequently different simulation results. fixing seed ensure able reproduce results vignette. can specify seed calling ?set.seed.","code":"#Set a seed for RNG set.seed(   #A seed   seed = 5381L,                   #a randomly chosen integer value   #The kind of RNG to use   kind = \"Mersenne-Twister\",      #we make explicit the current R default value   #The kind of Normal generation   normal.kind = \"Inversion\"       #we make explicit the current R default value )"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"resampling-without-replacement","dir":"Articles > Sampling","previous_headings":"","what":"Resampling Without Replacement","title":"Resampling Without Replacement","text":"available methods taking repeated samples without replacement can listed ?listAvailableSamplingMethods function call, setting input argument 'rswor'. ?listAvailableSamplingMethods returns table two columns: id: id sampling method, used function calls name: name sampling method name resampling functions can retrieved calling ?listResamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?repeatedSimpleRandomSampleWithoutReplacement. documentation, can see function accepts 3 arguments input: k: number repeated samples generate N: population size n: sample size","code":"#list sampling methods sampling.methods = listAvailableSamplingMethods(x = 'rswor')  #print in table knitr::kable(x = sampling.methods) #list resampling function names resampling.function.names = listResamplingFunctionNames(x = 'rswor')  #print in table knitr::kable(x = resampling.function.names) #See documentation ?repeatedSimpleRandomSampleWithoutReplacement"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"simple-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Simple Random Sampling","title":"Resampling Without Replacement","text":"resampling via simple random sampling (SRS), simple random samples without replacement repeatedly taken population. function implementing sampling scheme ?repeatedSimpleRandomSampleWithoutReplacement, accepts 3 arguments: k: number repeated samples generate N: population size n: sample size Instead using ?repeatedSimpleRandomSampleWithoutReplacement, can take repeated samples using ?resample function.","code":"#Simple random sampling without replacement repeatedSimpleRandomSampleWithoutReplacement(   k = 2,   N = 10,   n = 8 ) #> [[1]] #> [1]  1  9  7  2  4  3  6 10 #>  #> [[2]] #> [1] 9 8 1 7 4 5 6 3 #Simple random sampling without replacement obj = resample(   x = 10,   n = 8,   k = 2,   method = 'srswor' )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using simple random #> sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 2, 3, 9, 5, ...          8           2 #> 2            2 2, 10, 8, , ...          8           2  #Samples getSamples(obj) #> [[1]] #> [1] 2 3 9 5 7 4 6 1 #>  #> [[2]] #> [1]  2 10  8  1  6  4  3  7  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  8 10 #>  #> [[2]] #> [1] 5 9  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"random-sampling-with-unequal-probability","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Random Sampling With Unequal Probability","title":"Resampling Without Replacement","text":"can use ?repeatedSampleWithoutReplacement draw repeated samples without replacement unequal probability. documentation, can see function accepts 4 arguments input: k: number repeated samples generate N: population size n: sample size prob: optional vector probabilities obtaining population elements example, let’s assume population interest 10 elements, first 3 elements higher chance selected. can take repeated samples using ?resample function setting method = 'rswor'.","code":"#Random sampling without replacement repeatedSampleWithoutReplacement(   k = 2,   N = 10,   n = 5,   prob = c(rep(3,3), rep(1,7)) ) #> [[1]] #> [1]  3  7 10  2  1 #>  #> [[2]] #> [1] 7 2 1 9 3 #Random sampling without replacement obj = resample(   x = 10,   n = 5,   k = 2,   method = 'rswor',   prob = c(rep(3,3),rep(1,7)) )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using random #> sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 7, 3, 6, 2, ...          5           5 #> 2            2 6, 1, 2, 3, ...          5           5  #Samples getSamples(obj) #> [[1]] #> [1] 7 3 6 2 1 #>  #> [[2]] #> [1] 6 1 2 3 8  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  4  5  8  9 10 #>  #> [[2]] #> [1]  4  5  7  9 10  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"stratified-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Stratified Random Sampling","title":"Resampling Without Replacement","text":"Repeated stratified samples without replacement can taken using ?repeatedStratifiedSampleWithoutReplacement accept strata argument input. can take repeated samples using ?resample function setting method = 'stratified_rswor'.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Stratified sampling without replacement repeatedStratifiedSampleWithoutReplacement(   k = 2,   strata = strata,   n = 6 ) #> [[1]] #> [1] 2 1 4 9 6 5 #>  #> [[2]] #> [1] 3 5 4 6 2 9 #Stratified sampling without replacement obj = resample(   x = strata,   n = 6,   k = 2,   method = 'stratified_rswor' )  #Print print(obj) #>  #> 2 samples taken from a population of 9 elements by using stratified #> random sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 7, 5, 8, ...          6           3 #> 2            2 4, 8, 9, 2, ...          6           3  #Samples getSamples(obj) #> [[1]] #> [1] 1 7 5 8 4 2 #>  #> [[2]] #> [1] 4 8 9 2 5 1  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 3 6 9 #>  #> [[2]] #> [1] 3 6 7  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"balanced-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Balanced Random Sampling","title":"Resampling Without Replacement","text":"Balanced sampling special case stratified sampling used ensure subgroups population equally represented taken sample. Repeated balanced samples without replacement can taken using ?repeatedBalancedSampleWithoutReplacement: can take repeated samples using ?resample function setting method = 'balanced_rswor'.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Balanced sampling without replacement s = repeatedBalancedSampleWithoutReplacement(   k = 2,   strata = strata,   n = 6 )  #Check ratio in the samples table(strata[s[[1]]])/length(strata[s[[1]]]) #>  #>   a   b  #> 0.5 0.5 table(strata[s[[2]]])/length(strata[s[[2]]]) #>  #>   a   b  #> 0.5 0.5 #Balanced sampling without replacement obj = resample(   x = strata,   n = 6,   k = 2,   method = 'balanced_rswor' )  #Print print(obj) #>  #> 2 samples taken from a population of 9 elements by using balanced #> random sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 8, 9, 3, 7, ...          6           3 #> 2            2 1, 5, 2, 3, ...          6           3  #Samples getSamples(obj) #> [[1]] #> [1] 8 9 3 7 1 2 #>  #> [[2]] #> [1] 1 5 2 3 7 4  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 4 5 6 #>  #> [[2]] #> [1] 6 8 9  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"permutation-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Permutation Sampling","title":"Resampling Without Replacement","text":"can take repeated permutation samples using ?repeatedPermutationSample: can also use ?resample function setting method = 'permutation'.","code":"#Permutation sampling repeatedPermutationSample(   k = 2,   N = 10 ) #> [[1]] #>  [1]  3  6  8 10  2  1  5  9  7  4 #>  #> [[2]] #>  [1]  9  7  2  1  5  8  4  6  3 10 #Permutation sampling obj = resample(   x = 10,   k = 2,   method = 'permutation' )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using permutation #> sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 10, 3, 5, , ...         10           0 #> 2            2 3, 9, 5, 4, ...         10           0  #Samples getSamples(obj) #> [[1]] #>  [1] 10  3  5  8  7  6  4  2  9  1 #>  #> [[2]] #>  [1]  3  9  5  4  8 10  1  6  2  7  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> integer(0) #>  #> [[2]] #> integer(0)  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"K-fold Sampling","title":"Resampling Without Replacement","text":"idea behind k-fold resampling taken k-fold cross-validation: k samples taken population, -th sample generated removing -th fold population merging remaining k - 1 folds together. can take k samples via k-fold sampling calling ?repeatedRandomKm1Folds. function accepts two arguments input: k: number folds N: population size ?repeatedRandomKm1Folds returns list length k element sample obtained merging k-1 folds together. can take repeated samples using ?resample function setting method = 'kfolds'.","code":"#K-1 folds sampling repeatedRandomKm1Folds(   N = 10,   k = 3 ) #> [[1]] #> [1] 1 2 3 4 7 8 #>  #> [[2]] #> [1]  3  4  5  6  8  9 10 #>  #> [[3]] #> [1]  1  2  5  6  7  9 10 #K-folds sampling obj = resample(   x = 10,   k = 3,   method = \"kfolds\" )  #Print print(obj) #>  #> 3 samples taken from a population of 10 elements by using random k-fold #> sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 3, 4, 7, ...          6           4 #> 2            2 2, 3, 4, 5, ...          7           3 #> 3            3 1, 2, 5, 6, ...          7           3  #Samples getSamples(obj) #> [[1]] #> [1]  1  3  4  7  8 10 #>  #> [[2]] #> [1] 2 3 4 5 6 8 9 #>  #> [[3]] #> [1]  1  2  5  6  7  9 10  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 2 5 6 9 #>  #> [[2]] #> [1]  1  7 10 #>  #> [[3]] #> [1] 3 4 8  #Plot plot(obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"stratified-k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Stratified K-fold Sampling","title":"Resampling Without Replacement","text":"can take repeated stratified samples via stratified k-fold sampling calling ?repeatedStratifiedKm1Folds. ?repeatedStratifiedKm1Folds assigns population k stratified folds returns k samples made elements k-1 folds: can take repeated samples using ?resample function setting method = 'stratified_kfolds'.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Assign data to 3 folds i = repeatedStratifiedKm1Folds(   strata = strata,   k = 3 )  #Check folds i #> [[1]] #> [1] 1 2 5 7 8 9 #>  #> [[2]] #> [1] 2 3 4 5 6 8 #>  #> [[3]] #> [1] 1 3 4 6 7 9  #Check ratio in the folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         a         b  #> 0.3333333 0.6666667 table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         a         b  #> 0.3333333 0.6666667 table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>         a         b  #> 0.3333333 0.6666667 #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Stratified k-folds sampling obj = resample(   x = strata,   k = 3,   method = \"stratified_kfolds\" )  #Print print(obj) #>  #> 3 samples taken from a population of 9 elements by using stratified #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 3, 4, 5, ...          6           3 #> 2            2 1, 2, 5, 6, ...          6           3 #> 3            3 2, 3, 4, 7, ...          6           3  #Samples getSamples(obj) #> [[1]] #> [1] 1 3 4 5 6 7 #>  #> [[2]] #> [1] 1 2 5 6 8 9 #>  #> [[3]] #> [1] 2 3 4 7 8 9  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 2 8 9 #>  #> [[2]] #> [1] 3 4 7 #>  #> [[3]] #> [1] 1 5 6  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"balanced-k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Balanced K-fold Sampling","title":"Resampling Without Replacement","text":"can take repeated balanced samples via balanced k-fold sampling calling ?repeatedBalancedKm1Folds, returns k samples made elements k-1 folds. Internally, uses ?balancedKFolds assign population k balanced folds: population balanced, element population assigned one k folds percentage stratum preserved fold population unbalanced undersample = TRUE, -called random undersampling adopted, .e. proportion strata population adjusted removing elements majority groups, stratum balanced can take repeated samples using ?resample function.  case unbalanced population, can use undersample argument.","code":"#Define balanced strata strata = c(rep(1,6),rep(2,6))  #Check ratio table(strata)/length(strata) #> strata #>   1   2  #> 0.5 0.5  #Assign data to 3 folds and take a sample i = repeatedBalancedKm1Folds(   strata = strata,   k = 3 )  #Check sample i #> [[1]] #> [1]  1  2  4  5  7  8  9 10 #>  #> [[2]] #> [1]  2  3  4  6  8  9 11 12 #>  #> [[3]] #> [1]  1  3  5  6  7 10 11 12  #Check ratio in the sample table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   1   2  #> 0.5 0.5 table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   1   2  #> 0.5 0.5 table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>   1   2  #> 0.5 0.5  #Define unbalanced strata strata = c(rep(1,6),rep(2,12))  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667  #Assign data to 3 folds and take a sample i = repeatedBalancedKm1Folds(   strata = strata,   k = 3,   undersample = T ) #Check folds i #> [[1]] #> [1]  3  4  5  6  8 13 17 18 #>  #> [[2]] #> [1]  1  2  4  6  8 12 14 18 #>  #> [[3]] #> [1]  1  2  3  5 12 13 14 17 #>  #> attr(,\"removed.data\") #> [1]  7  9 10 11 15 16 #Check ratio in the folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   1   2  #> 0.5 0.5 table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   1   2  #> 0.5 0.5 table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>   1   2  #> 0.5 0.5 #Define strata strata = c(rep(\"a\", 6),rep(\"b\", 6))  #Balanced k-folds sampling (balanced population) obj = resample(   x = strata,   k = 3,   method = \"balanced_kfolds\" )  #Print print(obj) #>  #> 3 samples taken from a population of 12 elements by using balanced #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 3, 4, 6, ...          8           4 #> 2            2 1, 2, 3, 5, ...          8           4 #> 3            3 2, 4, 5, 6, ...          8           4  #Samples getSamples(obj) #> [[1]] #> [1]  1  3  4  6  7  9 10 12 #>  #> [[2]] #> [1]  1  2  3  5  7  8 11 12 #>  #> [[3]] #> [1]  2  4  5  6  8  9 10 11  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  2  5  8 11 #>  #> [[2]] #> [1]  4  6  9 10 #>  #> [[3]] #> [1]  1  3  7 12  #Plot plot(x = obj, strata = strata) #Define strata strata = c(rep(\"a\",6),rep(\"b\",8))  #Balanced k-folds sampling (unbalanced population) obj = resample(   x = strata,   k = 3,   method = \"balanced_kfolds\",   undersample = T )  #Print print(obj) #>  #> 3 samples taken from a population of 14 elements by using balanced #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 2, 3, 4, ...          8           4 #> 2            2 3, 4, 5, 6, ...          8           4 #> 3            3 1, 2, 5, 6, ...          8           4  #Samples getSamples(obj) #> [[1]] #> [1]  1  2  3  4  7 10 12 13 #>  #> [[2]] #> [1]  3  4  5  6  7  8 10 14 #>  #> [[3]] #> [1]  1  2  5  6  8 12 13 14  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  5  6  8 14 #>  #> [[2]] #> [1]  1  2 12 13 #>  #> [[3]] #> [1]  3  4  7 10  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"leave-p-out-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Leave-p-out Sampling","title":"Resampling Without Replacement","text":"Leave-p-resampling exhaustive resampling technique, samples size p repeatedly taken population possible combinations p elements considered. samples used holdout data. ?repeatedLeavePOut returns list length \\(\\binom{N}{p}\\) element sample obtained removing holdout data: order use ?resample function, need set method = 'leave_p_out'.","code":"#Repeatedly sample leaving out p elements each time repeatedLeavePOut(N = 5, p = 2) #> [[1]] #> [1] 3 4 5 #>  #> [[2]] #> [1] 2 4 5 #>  #> [[3]] #> [1] 2 3 5 #>  #> [[4]] #> [1] 2 3 4 #>  #> [[5]] #> [1] 1 4 5 #>  #> [[6]] #> [1] 1 3 5 #>  #> [[7]] #> [1] 1 3 4 #>  #> [[8]] #> [1] 1 2 5 #>  #> [[9]] #> [1] 1 2 4 #>  #> [[10]] #> [1] 1 2 3 #Leave-p-out sampling obj = resample(   x = 5,   n = 2,   method = \"leave_p_out\" )  #Print print(obj) #>  #> 10 samples taken from a population of 5 elements by using leave-p-out #> sampling. #>  #>   sampleNumber  sample sampleSize holdoutSize #> 1            1 3, 4, 5          3           2 #> 2            2 2, 4, 5          3           2 #> 3            3 2, 3, 5          3           2 #> 4            4 2, 3, 4          3           2 #> 5            5 1, 4, 5          3           2 #> ...  #Samples getSamples(obj) #> [[1]] #> [1] 3 4 5 #>  #> [[2]] #> [1] 2 4 5 #>  #> [[3]] #> [1] 2 3 5 #>  #> [[4]] #> [1] 2 3 4 #>  #> [[5]] #> [1] 1 4 5 #>  #> [[6]] #> [1] 1 3 5 #>  #> [[7]] #> [1] 1 3 4 #>  #> [[8]] #> [1] 1 2 5 #>  #> [[9]] #> [1] 1 2 4 #>  #> [[10]] #> [1] 1 2 3  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 3 #>  #> [[3]] #> [1] 1 4 #>  #> [[4]] #> [1] 1 5 #>  #> [[5]] #> [1] 2 3 #>  #> [[6]] #> [1] 2 4 #>  #> [[7]] #> [1] 2 5 #>  #> [[8]] #> [1] 3 4 #>  #> [[9]] #> [1] 3 5 #>  #> [[10]] #> [1] 4 5  #Plot plot(obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wor.html","id":"leave-one-out-sampling","dir":"Articles > Sampling","previous_headings":"Resampling Without Replacement","what":"Leave-one-out Sampling","title":"Resampling Without Replacement","text":"leave-one-particular case leave-p-, p = 1. Similarly leave-p-, leave-one-resampling exhaustive resampling technique, samples size 1 repeatedly taken population element population considered holdout data. ?repeatedLeaveOneOut returns list length N element sample obtained removing holdout data: order use ?resample function, need set method = 'leave_one_out'.","code":"#Take one sample leaving out 1 element repeatedLeaveOneOut(N = 5) #> [[1]] #> [1] 1 3 4 5 #>  #> [[2]] #> [1] 1 2 3 4 #>  #> [[3]] #> [1] 2 3 4 5 #>  #> [[4]] #> [1] 1 2 3 5 #>  #> [[5]] #> [1] 1 2 4 5 #Leave-one-out sampling obj = resample(   x = 5,   method = \"leave_one_out\" )  #Print print(obj) #>  #> 5 samples taken from a population of 5 elements by using leave-one-out #> sampling. #>  #>   sampleNumber     sample sampleSize holdoutSize #> 1            1 1, 2, 4, 5          4           1 #> 2            2 1, 2, 3, 5          4           1 #> 3            3 1, 2, 3, 4          4           1 #> 4            4 1, 3, 4, 5          4           1 #> 5            5 2, 3, 4, 5          4           1  #Samples getSamples(obj) #> [[1]] #> [1] 1 2 4 5 #>  #> [[2]] #> [1] 1 2 3 5 #>  #> [[3]] #> [1] 1 2 3 4 #>  #> [[4]] #> [1] 1 3 4 5 #>  #> [[5]] #> [1] 2 3 4 5  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 5 #>  #> [[4]] #> [1] 2 #>  #> [[5]] #> [1] 1  #Plot plot(obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"introduction","dir":"Articles > Sampling","previous_headings":"","what":"Introduction","title":"Resampling With Replacement","text":"Sampling replacement implies element population may appear multiple times one sample. different techniques sampling replacement, including: simple random sampling random sampling unequal probabilities stratified sampling balanced sampling (special case stratified sampling) article, show draw repeated samples replacement population using functions implemented resampling. information sampling techniques, see Sampling replacement.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"loading","dir":"Articles > Sampling","previous_headings":"Setup","what":"Loading","title":"Resampling With Replacement","text":"Firstly, need load resampling needed R packages:","code":"#resampling library(resampling)  #Packages for visualisation require(ComplexHeatmap, quietly = TRUE) require(grid, quietly = TRUE) require(RColorBrewer, quietly = TRUE)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"seed","dir":"Articles > Sampling","previous_headings":"Setup","what":"Seed","title":"Resampling With Replacement","text":", set seed random number generation (RNG). fact, different R sessions different seeds created current time process ID default, consequently different simulation results. fixing seed ensure able reproduce results vignette. can specify seed calling ?set.seed.","code":"#Set a seed for RNG set.seed(   #A seed   seed = 5381L,                   #a randomly chosen integer value   #The kind of RNG to use   kind = \"Mersenne-Twister\",      #we make explicit the current R default value   #The kind of Normal generation   normal.kind = \"Inversion\"       #we make explicit the current R default value )"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"resampling-with-replacement","dir":"Articles > Sampling","previous_headings":"","what":"Resampling With Replacement","title":"Resampling With Replacement","text":"available methods taking repeated samples replacement can listed ?listAvailableSamplingMethods function call, setting input argument 'rswr'. ?listAvailableSamplingMethods returns table two columns: id: id sampling method, used function calls name: name sampling method name resampling functions can retrieved calling ?listResamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?repeatedSimpleRandomSampleWithReplacement. documentation, can see function accepts 3 arguments input: k: number repeated samples generate N: population size n: sample size","code":"#list sampling methods sampling.methods = listAvailableSamplingMethods(x = 'rswr')  #print in table knitr::kable(x = sampling.methods) #list resampling function names resampling.function.names = listResamplingFunctionNames(x = 'rswr')  #print in table knitr::kable(x = resampling.function.names) #See documentation ?repeatedSimpleRandomSampleWithReplacement"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"simple-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling With Replacement","what":"Simple Random Sampling","title":"Resampling With Replacement","text":"resampling via simple random sampling (SRS), simple random samples replacement repeatedly taken population. function implementing sampling scheme ?repeatedSimpleRandomSampleWithReplacement, accepts 3 arguments: k: number repeated samples generate N: population size n: sample size Instead using ?repeatedSimpleRandomSampleWithReplacement, can take repeated samples using ?resample function.","code":"#Simple random sampling with replacement repeatedSimpleRandomSampleWithReplacement(   k = 2,   N = 10,   n = 8 ) #> [[1]] #> [1]  1  9 10  3  4  1  9  8 #>  #> [[2]] #> [1] 1 7 6 5 2 3 5 4 #Simple random sampling with replacement obj = resample(   x = 10,   n = 8,   k = 2,   method = 'srswr' )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using simple random #> sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 2, 2, 8, 9, ...          8           4 #> 2            2 9, 6, 1, 4, ...          8           4  #Samples getSamples(obj) #> [[1]] #> [1]  2  2  8  9  6  7  7 10 #>  #> [[2]] #> [1]  9  6  1  4  9  8 10  1  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 1 3 4 5 #>  #> [[2]] #> [1] 2 3 5 7  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"random-sampling-with-unequal-probability","dir":"Articles > Sampling","previous_headings":"Resampling With Replacement","what":"Random Sampling With Unequal Probability","title":"Resampling With Replacement","text":"can use ?repeatedSampleWithReplacement draw repeated samples without replacement unequal probability. documentation, can see function accepts 4 arguments input: k: number repeated samples generate N: population size n: sample size prob: optional vector probabilities obtaining population elements example, let’s assume population interest 10 elements, first 3 elements higher chance selected. can take repeated samples using ?resample function setting method = 'rswr'.","code":"#Random sampling with replacement repeatedSampleWithReplacement(   k = 2,   N = 10,   n = 5,   prob = c(rep(3,3), rep(1,7)) ) #> [[1]] #> [1] 4 8 1 4 1 #>  #> [[2]] #> [1] 1 1 6 2 5 #Random sampling with replacement obj = resample(   x = 10,   n = 5,   k = 2,   method = 'rswr',   prob = c(rep(3,3),rep(1,7)) )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using random #> sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 2, 1, 8, 1, ...          5           6 #> 2            2 1, 1, 3, 8, ...          5           7  #Samples getSamples(obj) #> [[1]] #> [1] 2 1 8 1 4 #>  #> [[2]] #> [1] 1 1 3 8 3  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  3  5  6  7  9 10 #>  #> [[2]] #> [1]  2  4  5  6  7  9 10  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"stratified-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling With Replacement","what":"Stratified Random Sampling","title":"Resampling With Replacement","text":"Repeated stratified samples replacement can taken using ?repeatedStratifiedSampleWithReplacement accept strata argument input. can take repeated samples using ?resample function setting method = 'stratified_rswr'.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Stratified sampling without replacement repeatedStratifiedSampleWithReplacement(   k = 2,   strata = strata,   n = 6 ) #> [[1]] #> [1] 5 7 1 2 6 6 #>  #> [[2]] #> [1] 8 5 1 5 5 1 #Stratified sampling with replacement obj = resample(   x = strata,   n = 6,   k = 2,   method = 'stratified_rswr' )  #Print print(obj) #>  #> 2 samples taken from a population of 9 elements by using stratified #> random sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 6, 9, 1, ...          6           5 #> 2            2 6, 6, 1, 8, ...          6           4  #Samples getSamples(obj) #> [[1]] #> [1] 1 6 9 1 7 9 #>  #> [[2]] #> [1] 6 6 1 8 5 3  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 2 3 4 5 8 #>  #> [[2]] #> [1] 2 4 7 9  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"balanced-random-sampling","dir":"Articles > Sampling","previous_headings":"Resampling With Replacement","what":"Balanced Random Sampling","title":"Resampling With Replacement","text":"Balanced sampling special case stratified sampling used ensure subgroups population equally represented taken sample. Repeated balanced samples replacement can taken using ?repeatedBalancedSampleWithReplacement: can take repeated samples using ?resample function setting method = 'balanced_rswr'.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Balanced sampling with replacement s = repeatedBalancedSampleWithReplacement(   k = 2,   strata = strata,   n = 6 )  #Check ratio in the samples table(strata[s[[1]]])/length(strata[s[[1]]]) #>  #>   a   b  #> 0.5 0.5 table(strata[s[[2]]])/length(strata[s[[2]]]) #>  #>   a   b  #> 0.5 0.5 #Balanced sampling with replacement obj = resample(   x = strata,   n = 6,   k = 2,   method = 'balanced_rswr' )  #Print print(obj) #>  #> 2 samples taken from a population of 9 elements by using balanced #> random sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 9, 1, 3, 5, ...          6           3 #> 2            2 2, 9, 2, 4, ...          6           5  #Samples getSamples(obj) #> [[1]] #> [1] 9 1 3 5 6 2 #>  #> [[2]] #> [1] 2 9 2 4 4 3  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1] 4 7 8 #>  #> [[2]] #> [1] 1 5 6 7 8  #Plot plot(x = obj, strata = strata)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/resampling_wr.html","id":"bootstrap-sampling","dir":"Articles > Sampling","previous_headings":"Resampling With Replacement","what":"Bootstrap Sampling","title":"Resampling With Replacement","text":"can take repeated bootstrap samples using ?repeatedBootstrapSample: can also use ?resample function setting method = 'bootstrap'.","code":"#Bootstrap sampling repeatedBootstrapSample(   k = 2,   N = 10 ) #> [[1]] #>  [1]  9  7 10  9  2  4 10  7 10  3 #>  #> [[2]] #>  [1] 5 5 7 5 5 8 6 2 3 3 #Bootstrap sampling obj = resample(   x = 10,   k = 2,   method = 'bootstrap' )  #Print print(obj) #>  #> 2 samples taken from a population of 10 elements by using ordinary #> bootstrap sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 9, 5, 4, 5, ...         10           2 #> 2            2 5, 8, 7, 1, ...         10           3  #Samples getSamples(obj) #> [[1]] #>  [1] 9 5 4 5 7 3 5 2 6 8 #>  #> [[2]] #>  [1]  5  8  7  1  9 10  8  8  8  6  #Holdout Data getHoldOutSamples(obj) #> [[1]] #> [1]  1 10 #>  #> [[2]] #> [1] 2 3 4  #Plot plot(x = obj)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"introduction","dir":"Articles > Sampling","previous_headings":"","what":"Introduction","title":"Sampling Without Replacement","text":"statistics, sampling selection subset elements population, defined complete set subjects interest. Since often expensive logistically impossible collect data every case population, sampling instead used cheap fast methodology estimate characteristics. Different sampling schemes exist, can grouped 2 main categories, .e. sampling without replacement: sampling replacement implies element population may appear multiple times one sample sampling without replacement, member population can chosen one sample article, show draw samples without replacement population using functions implemented resampling. information draw repeated samples without replacement, see Resampling without replacement.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"loading","dir":"Articles > Sampling","previous_headings":"Setup","what":"Loading","title":"Sampling Without Replacement","text":"Firstly, need load resampling R package:","code":"library(resampling)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"seed","dir":"Articles > Sampling","previous_headings":"Setup","what":"Seed","title":"Sampling Without Replacement","text":", set seed random number generation (RNG). fact, different R sessions different seeds created current time process ID default, consequently different simulation results. fixing seed ensure able reproduce results vignette. can specify seed calling ?set.seed.","code":"#Set a seed for RNG set.seed(   #A seed   seed = 5381L,                   #a randomly chosen integer value   #The kind of RNG to use   kind = \"Mersenne-Twister\",      #we make explicit the current R default value   #The kind of Normal generation   normal.kind = \"Inversion\"       #we make explicit the current R default value )"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"sampling-without-replacement","dir":"Articles > Sampling","previous_headings":"","what":"Sampling Without Replacement","title":"Sampling Without Replacement","text":"previously wrote, sampling without replacement implies elements population can chosen one sample. different techniques sampling without replacement, including: simple random sampling random sampling unequal probabilities stratified sampling balanced sampling (special case stratified sampling) permutation sampling k-fold sampling leave-p-sampling available methods can listed ?listAvailableSamplingMethods function call, setting input argument 'rswor'. ?listAvailableSamplingMethods returns table two columns: id: id sampling method, used function calls name: name sampling method name sampling functions can retrieved calling ?listSamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?simpleRandomSampleWithoutReplacement. documentation, can see function accepts 2 arguments input: N: population size n: sample size","code":"#list sampling methods sampling.methods = listAvailableSamplingMethods(x = 'rswor')  #print in table knitr::kable(x = sampling.methods) #list sampling function names sampling.function.names = listSamplingFunctionNames(x = 'rswor')  #print in table knitr::kable(x = sampling.function.names) #See documentation ?simpleRandomSampleWithoutReplacement"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"simple-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Simple Random Sampling","title":"Sampling Without Replacement","text":"Simple random sampling (SRS) easiest form sampling without replacement. SRS without replacement, element population probability selected sample.","code":"#Simple random sampling without replacement simpleRandomSampleWithoutReplacement(   N = 10,   n = 8 ) #> [1]  1  9  7  2  4  3  6 10"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"random-sampling-with-unequal-probability","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Random Sampling With Unequal Probability","title":"Sampling Without Replacement","text":"concept random sampling without replacement unequal probability developed Narain (Narain 1951), Horvitz Thompson (Horvitz Thompson 1952). sampling design, elements population different probabilities selected. can use ?sampleWithoutReplacement draw sample. example, let’s assume population interest 10 elements, first 3 elements higher chance selected.","code":"#Random sampling without replacement sampleWithoutReplacement(   N = 10,   n = 5,   prob = c(rep(3,3), rep(1,7)) ) #> [1] 3 5 1 8 7"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"stratified-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Stratified Random Sampling","title":"Sampling Without Replacement","text":"population can partitioned groups (.e. strata subpopulations) certain properties common, stratified sampling approach can used. sampling design adopted ensure subgroups population represented taken sample. stratified sample without replacement can taken using ?stratifiedSampleWithoutReplacement accept strata argument input. ?stratifiedSampleWithoutReplacement implements -called “proportionate allocation”, proportion strata population maintained samples.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Stratified sampling without replacement stratifiedSampleWithoutReplacement(   strata = strata,   n = 9 ) #> [1] 5 6 8 4 2 7 3 9 1 #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Stratified sampling without replacement s = stratifiedSampleWithoutReplacement(   strata = strata,   n = 6 )  #Check ratio in the sample table(strata[s])/length(strata[s]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"balanced-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Balanced Random Sampling","title":"Sampling Without Replacement","text":"Balanced sampling special case stratified sampling used ensure subgroups population equally represented taken sample.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Balanced sampling without replacement s = balancedSampleWithoutReplacement(   strata = strata,   n = 6 )  #Check ratio in the sample table(strata[s])/length(strata[s]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"permutation-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Permutation Sampling","title":"Sampling Without Replacement","text":"permutation sample sample size population, elements simply rearranged random order. permutation sample can taken using ?permutationSample:","code":"#Permutation sampling permutationSample(   N = 10 ) #>  [1]  7  9  2 10  1  8  4  6  3  5"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"K-fold Sampling","title":"Sampling Without Replacement","text":"k-fold sampling, element population randomly assigned 1 k folds. resampling provides function easily select random sample made elements k-1 folds:","code":"#K-1 folds sampling randomKm1Folds(   N = 10,   k = 3 ) #> [1]  3  5  6  7  8  9 10"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"stratified-k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Stratified K-fold Sampling","title":"Sampling Without Replacement","text":"stratified k-fold sampling, element population assigned one k folds percentage stratum population preserved fold. ?stratifiedKm1Folds assigns population k stratified folds returns sample made elements k-1 folds:","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Assign data to 3 folds and take a sample i = stratifiedKm1Folds(   strata = strata,   k = 3 )  #Check folds i #> [1] 1 3 4 6 8 9  #Check ratio in the folds table(strata[i])/length(strata[i]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"balanced-k-fold-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Balanced K-fold Sampling","title":"Sampling Without Replacement","text":"Balanced k-fold sampling special case stratified sampling population assigned k balanced folds. ?balancedKm1Folds assigns population k balanced folds returns sample made elements k-1 folds. Internally, uses ?balancedKFolds assign population k balanced folds: population balanced, element population assigned one k folds percentage stratum preserved fold population unbalanced undersample = TRUE, -called random undersampling adopted, .e. proportion strata population adjusted removing elements majority groups, stratum balanced","code":"#Define balanced strata strata = c(rep(1,6),rep(2,6))  #Check ratio table(strata)/length(strata) #> strata #>   1   2  #> 0.5 0.5  #Assign data to 3 folds and take a sample i = balancedKm1Folds(   strata = strata,   k = 3 )  #Check sample i #> [1]  1  3  5  6  7  8  9 10  #Check ratio in the sample table(strata[i])/length(strata[i]) #>  #>   1   2  #> 0.5 0.5  #Define unbalanced strata strata = c(rep(1,6),rep(2,12))  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667  #Assign data to 3 folds and take a sample i = balancedKm1Folds(   strata = strata,   k = 3,   undersample = T )  #Check folds i #> [1]  1  3  4  5  7 10 11 17  #Check ratio in the folds table(strata[i])/length(strata[i]) #>  #>   1   2  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"leave-p-out-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Leave-p-out Sampling","title":"Sampling Without Replacement","text":"leave-p-sampling, random sample size p taken population used holdout data. ?leavePOutSample returns random sample obtained removing holdout sample population:","code":"#Take one sample leaving out p elements leavePOutSample(N = 5, p = 2) #> [1] 1 2 3"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wor.html","id":"leave-one-out-sampling","dir":"Articles > Sampling","previous_headings":"Sampling Without Replacement","what":"Leave-one-out Sampling","title":"Sampling Without Replacement","text":"leave-one-particular case leave-p-, p = 1. Particularly, random sample size 1 taken population used holdout data. example, let’s assume population interest 5 elements. case, sample obtained sampling technique result 4 elements:","code":"#Take one sample leaving out 1 element leaveOneOutSample(N = 5) #> [1] 1 2 3 5"},{"path":[]},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"introduction","dir":"Articles > Sampling","previous_headings":"","what":"Introduction","title":"Sampling With Replacement","text":"statistics, sampling selection subset elements population, defined complete set subjects interest. Since often expensive logistically impossible collect data every case population, sampling instead used cheap fast methodology estimate characteristics. Different sampling schemes exist, can grouped 2 main categories, .e. sampling without replacement: sampling replacement implies element population may appear multiple times one sample sampling without replacement, member population can chosen one sample article, show draw samples replacement population using functions implemented resampling. information draw repeated samples replacement, see Resampling replacement.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"loading","dir":"Articles > Sampling","previous_headings":"Setup","what":"Loading","title":"Sampling With Replacement","text":"Firstly, need load resampling R package:","code":"library(resampling)"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"seed","dir":"Articles > Sampling","previous_headings":"Setup","what":"Seed","title":"Sampling With Replacement","text":", set seed random number generation (RNG). fact, different R sessions different seeds created current time process ID default, consequently different simulation results. fixing seed ensure able reproduce results vignette. can specify seed calling ?set.seed.","code":"#Set a seed for RNG set.seed(   #A seed   seed = 5381L,                   #a randomly chosen integer value   #The kind of RNG to use   kind = \"Mersenne-Twister\",      #we make explicit the current R default value   #The kind of Normal generation   normal.kind = \"Inversion\"       #we make explicit the current R default value )"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"sampling-with-replacement","dir":"Articles > Sampling","previous_headings":"","what":"Sampling With Replacement","title":"Sampling With Replacement","text":"previously wrote, sampling replacement implies elements population can chosen multiple times one sample. different techniques sampling replacement, including: simple random sampling random sampling unequal probabilities stratified sampling balanced sampling (special case stratified sampling) available methods can listed ?listAvailableSamplingMethods function call, setting input argument 'rswr'. ?listAvailableSamplingMethods returns table two columns: id: id sampling method, used function calls name: name sampling method name sampling functions can retrieved calling ?listSamplingFunctionNames. function documented. learn specific method possible use ? operator. example, let’s check function ?simpleRandomSampleWithReplacement. documentation, can see function accepts 2 arguments input: N: population size n: sample size","code":"#list sampling methods sampling.methods = listAvailableSamplingMethods(x = 'rswr')  #print in table knitr::kable(x = sampling.methods) #list sampling function names sampling.function.names = listSamplingFunctionNames(x = 'rswr')  #print in table knitr::kable(x = sampling.function.names) #See documentation ?simpleRandomSampleWithReplacement"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"simple-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling With Replacement","what":"Simple Random Sampling","title":"Sampling With Replacement","text":"Simple random sampling (SRS) easiest form sampling replacement. SRS replacement, element population probability selected sample.","code":"#Simple random sampling with replacement simpleRandomSampleWithReplacement(   N = 10,   n = 8 ) #> [1]  1  9 10  3  4  1  9  8"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"random-sampling-with-unequal-probability","dir":"Articles > Sampling","previous_headings":"Sampling With Replacement","what":"Random Sampling With Unequal Probability","title":"Sampling With Replacement","text":"concept random sampling unequal probability perhaps introduced Hansen Hurwitz context sampling replacement (Hansen Hurwitz 1943). sampling design, elements population different probabilities selected. can use ?sampleWithReplacement draw sample. example, let’s assume population interest 10 elements, first 3 elements higher chance selected.","code":"#Random sampling with replacement sampleWithReplacement(   N = 10,   n = 8,   prob = c(rep(3,3), rep(1,7)) ) #> [1] 6 3 4 2 9 1 2 1"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"stratified-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling With Replacement","what":"Stratified Random Sampling","title":"Sampling With Replacement","text":"population can partitioned groups (.e. strata subpopulations) certain properties common, stratified sampling approach can used. sampling design adopted ensure subgroups population represented taken sample. stratified sample replacement can taken using ?stratifiedSampleWithReplacement accept strata argument input. ?stratifiedSampleWithReplacement implements -called “proportionate allocation”, proportion strata population maintained samples.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Stratified sampling with replacement stratifiedSampleWithReplacement(   strata = strata,   n = 9 ) #> [1] 5 2 7 8 8 3 3 8 5 #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Stratified sampling with replacement s = stratifiedSampleWithReplacement(   strata = strata,   n = 9 )  #Check ratio in the sample table(strata[s])/length(strata[s]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"balanced-random-sampling","dir":"Articles > Sampling","previous_headings":"Sampling With Replacement","what":"Balanced Random Sampling","title":"Sampling With Replacement","text":"Balanced sampling special case stratified sampling used ensure subgroups population equally represented taken sample.","code":"#Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667  #Balanced sampling with replacement s = balancedSampleWithReplacement(   strata = strata,   n = 8 )  #Check ratio in the sample table(strata[s])/length(strata[s]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/articles/sampling/sampling_wr.html","id":"bootstrap-sampling","dir":"Articles > Sampling","previous_headings":"Sampling With Replacement","what":"Bootstrap Sampling","title":"Sampling With Replacement","text":"Inspired earlier work jackknife, Bradley Efron published bootstrap method 1979 (Efron 1979). ordinary bootstrap sample special case random sample replacement sample size equivalent population size. bootstrap sample can taken using ?bootstrapSample:","code":"#Bootstrap sampling bootstrapSample(   N = 10 ) #>  [1] 10  3  3  4  3  9  8  2  2  5"},{"path":[]},{"path":"https://alebarberis.github.io/resampling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alessandro Barberis. Author, maintainer.","code":""},{"path":"https://alebarberis.github.io/resampling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barberis (2023). resampling: Repeated Sampling. https://github.com/alebarberis/resampling, https://alebarberis.github.io/resampling/.","code":"@Manual{,   title = {resampling: Repeated Sampling},   author = {Alessandro Barberis},   year = {2023},   note = {https://github.com/alebarberis/resampling, https://alebarberis.github.io/resampling/}, }"},{"path":"https://alebarberis.github.io/resampling/index.html","id":"resampling","dir":"","previous_headings":"","what":"Repeated Sampling","title":"Repeated Sampling","text":"resampling R package providing ready--use functions take repeated samples population. idea behind resampling provide different sampling techniques commonly used machine learning (random sampling without replacement, k-fold sampling, leave-p-sampling) single R package.","code":""},{"path":"https://alebarberis.github.io/resampling/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Repeated Sampling","text":"can install latest development version GitHub (requires devtools package):","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") }  devtools::install_github(   repo = \"alebarberis/resampling\",    dependencies = TRUE,    build_vignettes = FALSE )"},{"path":"https://alebarberis.github.io/resampling/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Repeated Sampling","text":"just getting started resampling, recommend looking Getting Started section site.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a data frame — as.data.frame.resampling","title":"Coerce to a data frame — as.data.frame.resampling","text":"Function coerce resampling object data frame.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a data frame — as.data.frame.resampling","text":"","code":"# S3 method for resampling as.data.frame(x, ..., stringsAsFactors = FALSE)"},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a data frame — as.data.frame.resampling","text":"x object class resampling ... additional arguments data.frame stringsAsFactors logical: character vectors converted     factors?  ‘factory-fresh’ default TRUE     previously changed FALSE R 4.0.0.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a data frame — as.data.frame.resampling","text":"data frame.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce to a data frame — as.data.frame.resampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/as.data.frame.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a data frame — as.data.frame.resampling","text":"","code":"#resampling object x = resampling(  method = 'rswor',  N = 10,  samples = list(c(1,5,7), c(6,2,9)) )  #print as.data.frame(x) #>   sampleNumber  sample sampleSize holdoutSize #> 1            1 1, 5, 7          3           7 #> 2            2 6, 2, 9          3           7"},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced K Folds — balancedKFolds","title":"Balanced K Folds — balancedKFolds","text":"Assigns population k balanced folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced K Folds — balancedKFolds","text":"","code":"balancedKFolds(strata = NULL, k, undersample = FALSE, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced K Folds — balancedKFolds","text":"strata vector stratification variables. population size length(strata) k number folds undersample logical, whether remove elements population order try obtain balanced folds prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced K Folds — balancedKFolds","text":"vector length length(strata) containing fold ids.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Balanced K Folds — balancedKFolds","text":"population balanced, element population assigned one k folds percentage stratum preserved fold. population unbalanced undersample = TRUE, -called \"random undersampling\" adopted, .e. proportion strata population adjusted removing elements majority groups, stratum balanced. error raised population unbalanced undersample = FALSE.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balanced K Folds — balancedKFolds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKFolds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced K Folds — balancedKFolds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define balanced strata strata = c(rep(1,6),rep(2,6))  #Check ratio table(strata)/length(strata) #> strata #>   1   2  #> 0.5 0.5   #Assign data to 3 folds i = balancedKFolds(  strata = strata,  k = 3 ) #Check folds i #>  [1] 2 1 1 3 2 3 2 3 1 2 3 1 #Check ratio in the folds table(strata[i==1])/length(strata[i==1]) #>  #>   1   2  #> 0.5 0.5  table(strata[i==2])/length(strata[i==2]) #>  #>   1   2  #> 0.5 0.5  table(strata[i==3])/length(strata[i==3]) #>  #>   1   2  #> 0.5 0.5   #Define unbalanced strata strata = c(rep(1,6),rep(2,12))  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = balancedKFolds(  strata = strata,  k = 3,  undersample = TRUE ) #Check folds i #>  [1]  2  3  3  2  1  1 NA NA  3 NA NA  1  2 NA  1  3 NA  2 #Check ratio in the folds table(strata[!is.na(i) & i==1])/length(strata[!is.na(i) & i==1]) #>  #>   1   2  #> 0.5 0.5  table(strata[!is.na(i) & i==2])/length(strata[!is.na(i) & i==2]) #>  #>   1   2  #> 0.5 0.5  table(strata[!is.na(i) & i==3])/length(strata[!is.na(i) & i==3]) #>  #>   1   2  #> 0.5 0.5    #Raise an error try(balancedKFolds(  strata = strata,  k = 3,  undersample = FALSE )) #> Error in balancedKFolds(strata = strata, k = 3, undersample = FALSE) :  #>   Data is not balanced. Change 'undersample' to TRUE."},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"K-1 Balanced Folds — balancedKm1Folds","title":"K-1 Balanced Folds — balancedKm1Folds","text":"Assigns population k balanced folds returns random sample made elements k-1 folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-1 Balanced Folds — balancedKm1Folds","text":"","code":"balancedKm1Folds(k, strata, undersample = FALSE, prob = NULL, i = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-1 Balanced Folds — balancedKm1Folds","text":"k number folds strata vector stratification variables. population size length(strata) undersample logical, whether remove elements population order try obtain balanced folds prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata (optional) integer, fold use holdout data","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-1 Balanced Folds — balancedKm1Folds","text":"vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-1 Balanced Folds — balancedKm1Folds","text":"element population randomly assigned one k folds percentage stratum population balanced fold (see balancedKFolds function details). provided, indicates -th fold considered holdout data. missing, one fold randomly selected holdout data. random sample generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-1 Balanced Folds — balancedKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-1 Balanced Folds — balancedKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define balanced strata strata = c(rep(1,6),rep(2,6))  #Check ratio table(strata)/length(strata) #> strata #>   1   2  #> 0.5 0.5   #Assign data to 3 folds i = balancedKm1Folds(  strata = strata,  k = 3 ) #Check indices i #> [1]  2  3  4  6  8  9 11 12 #Check ratio in the samples made of k-1 folds table(strata[i])/length(strata[i]) #>  #>   1   2  #> 0.5 0.5   #Define unbalanced strata strata = c(rep(1,6),rep(2,12))  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = balancedKm1Folds(  strata = strata,  k = 3,  undersample = TRUE ) #Check folds i #> [1]  1  3  4  6  9 13 16 18 #Check ratio in the samples made of k-1 folds table(strata[i])/length(strata[i]) #>  #>   1   2  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced Random Samples — balancedSample","title":"Balanced Random Samples — balancedSample","text":"Takes balanced sample without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced Random Samples — balancedSample","text":"","code":"balancedSample(strata, n, replace = FALSE, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced Random Samples — balancedSample","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size replace logical, whether sample replacement. Default FALSE prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced Random Samples — balancedSample","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Balanced Random Samples — balancedSample","text":"Balanced sampling technique sampling population can partitioned 'strata' ('subpopulations'), element population part one stratum. used ensure subgroups population equally represented taken sample. Different approaches exists take balanced samples imbalanced populations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Balanced Random Samples — balancedSample","text":"Garcia, Learning Imbalanced Data, IEEE Transactions Knowledge Data Engineering (2009)","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balanced Random Samples — balancedSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced Random Samples — balancedSample","text":"","code":"if (FALSE) { #Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata)  #Balanced random sample without replacement i = balancedSample(   strata = strata,   n = 6,   replace = FALSE ) #Check ratio in the sample table(strata[i])/length(strata[i])  #Balanced random sample with replacement i = balancedSample(   strata = strata,   n = 8,   replace = TRUE ) #Check ratio in the sample table(strata[i])/length(strata[i]) }"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"Takes balanced sample replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"","code":"balancedSampleWithReplacement(strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"function works number elements per stratum (given sample size n divided number groups strata) less/greater number elements minority group strata, taking independent samples replacement group.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"Garcia, Learning Imbalanced Data, IEEE Transactions Knowledge Data Engineering (2009)","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced Random Sample With Replacement — balancedSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Balanced random sample with replacement i = balancedSampleWithReplacement(   strata = strata,   n = 8 ) #Check indices i #> [1] 1 3 4 2 1 6 7 7 #Check ratio in the sample table(strata[i])/length(strata[i]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"Takes balanced sample without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"","code":"balancedSampleWithoutReplacement(strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"number elements per stratum (given sample size n divided number groups strata) less number elements minority group strata, function implements -called \"random undersampling\", proportion strata population adjusted taken sample removing elements majority stratum, group balanced. number elements per stratum greater number elements minority group strata, function raises error.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"Garcia, Learning Imbalanced Data, IEEE Transactions Knowledge Data Engineering (2009)","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/balancedSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced Random Sample Without Replacement — balancedSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Balanced random sample i = balancedSampleWithoutReplacement(   strata = strata,   n = 6 ) #Check indices i #> [1] 5 1 7 2 3 6 #Check ratio in the sample table(strata[i])/length(strata[i]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinary Bootstrap Sample — bootstrapSample","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"Takes bootstrap sample population. bootstrap sample sample taken replacement size population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"","code":"bootstrapSample(N, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"N positive integer value, population size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/bootstrapSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordinary Bootstrap Sample — bootstrapSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Random sample with replacement bootstrapSample(N = 10) #>  [1]  1  9 10  3  4  1  9  8  1  7"},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSampleSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the hold-out sample size — getHoldOutSampleSize","title":"Get the hold-out sample size — getHoldOutSampleSize","text":"Get hold-sample size resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSampleSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the hold-out sample size — getHoldOutSampleSize","text":"","code":"getHoldOutSampleSize(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSampleSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the hold-out sample size — getHoldOutSampleSize","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSampleSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the hold-out sample size — getHoldOutSampleSize","text":"vector integer values, size hold-sample x.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSampleSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the hold-out sample size — getHoldOutSampleSize","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the left-out data — getHoldOutSamples","title":"Get the left-out data — getHoldOutSamples","text":"Get elements population selected samples.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the left-out data — getHoldOutSamples","text":"","code":"getHoldOutSamples(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the left-out data — getHoldOutSamples","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the left-out data — getHoldOutSamples","text":"list item integer vector containing indices elements sampled population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getHoldOutSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the left-out data — getHoldOutSamples","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getNumberOfSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of taken samples — getNumberOfSamples","title":"Get the number of taken samples — getNumberOfSamples","text":"Get number taken samples resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getNumberOfSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of taken samples — getNumberOfSamples","text":"","code":"getNumberOfSamples(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getNumberOfSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of taken samples — getNumberOfSamples","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getNumberOfSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of taken samples — getNumberOfSamples","text":"number taken samples.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getNumberOfSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the number of taken samples — getNumberOfSamples","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getPopulationSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the population size — getPopulationSize","title":"Get the population size — getPopulationSize","text":"Get population size resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getPopulationSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the population size — getPopulationSize","text":"","code":"getPopulationSize(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getPopulationSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the population size — getPopulationSize","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getPopulationSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the population size — getPopulationSize","text":"integer value, population size.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getPopulationSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the population size — getPopulationSize","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getRemovedElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the removed elements — getRemovedElements","title":"Get the removed elements — getRemovedElements","text":"Get elements removed population sampling resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getRemovedElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the removed elements — getRemovedElements","text":"","code":"getRemovedElements(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getRemovedElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the removed elements — getRemovedElements","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getRemovedElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the removed elements — getRemovedElements","text":"vector integer values, indices elements removed population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getRemovedElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the removed elements — getRemovedElements","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Resampling Function — getResamplingFunction","title":"Get Resampling Function — getResamplingFunction","text":"function dispatcher resampling function selected input.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Resampling Function — getResamplingFunction","text":"","code":"getResamplingFunction(   id = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\") )"},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Resampling Function — getResamplingFunction","text":"id character string, one supported resampling techniques","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Resampling Function — getResamplingFunction","text":"resampling function: \"rswor\" repeatedSampleWithoutReplacement \"srswor\" repeatedSimpleRandomSampleWithoutReplacement \"stratified_rswor\" repeatedStratifiedSampleWithoutReplacement \"balanced_rswor\" repeatedBalancedSampleWithoutReplacement \"permutation\" repeatedPermutationSample \"kfolds\" repeatedRandomKm1Folds \"stratified_kfolds\" repeatedStratifiedKm1Folds \"balanced_kfolds\" repeatedBalancedKm1Folds \"leave_p_out\" repeatedLeavePOut \"leave_one_out\" repeatedLeaveOneOut \"rswr\" repeatedSampleWithReplacement \"srswr\" repeatedSimpleRandomSampleWithReplacement \"stratified_rswr\" repeatedStratifiedSampleWithReplacement \"balanced_rswr\" repeatedBalancedSampleWithReplacement \"bootstrap\" repeatedBootstrapSample","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Resampling Function — getResamplingFunction","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Resampling Function — getResamplingFunction","text":"","code":"f = getResamplingFunction(id = 'rswor')"},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunctionName.html","id":null,"dir":"Reference","previous_headings":"","what":"Resampling Function Name — getResamplingFunctionName","title":"Resampling Function Name — getResamplingFunctionName","text":"function returns name resampling function input.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunctionName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resampling Function Name — getResamplingFunctionName","text":"","code":"getResamplingFunctionName(   id = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\") )"},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunctionName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resampling Function Name — getResamplingFunctionName","text":"character string, name resampling function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getResamplingFunctionName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resampling Function Name — getResamplingFunctionName","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSampleSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sample size — getSampleSize","title":"Get the sample size — getSampleSize","text":"Get sample size resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSampleSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sample size — getSampleSize","text":"","code":"getSampleSize(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getSampleSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sample size — getSampleSize","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSampleSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sample size — getSampleSize","text":"vector integer values, size sample x.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSampleSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the sample size — getSampleSize","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sampled data — getSamples","title":"Get the sampled data — getSamples","text":"Get list samples resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sampled data — getSamples","text":"","code":"getSamples(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sampled data — getSamples","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sampled data — getSamples","text":"list samples repeatedly taken population. item list integer vector containing indices elements sampled population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the sampled data — getSamples","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sampling Function — getSamplingFunction","title":"Get Sampling Function — getSamplingFunction","text":"function dispatcher sampling function selected input.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sampling Function — getSamplingFunction","text":"","code":"getSamplingFunction(   id = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\") )"},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sampling Function — getSamplingFunction","text":"id character string, one supported sampling techniques","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sampling Function — getSamplingFunction","text":"sampling function: \"rswor\" sampleWithoutReplacement \"srswor\" simpleRandomSampleWithoutReplacement \"stratified_rswor\" stratifiedSampleWithoutReplacement \"balanced_rswor\" balancedSampleWithoutReplacement \"permutation\" permutationSample \"kfolds\" randomKm1Folds \"stratified_kfolds\" stratifiedKm1Folds \"balanced_kfolds\" balancedKm1Folds \"leave_p_out\" leavePOutSample \"leave_one_out\" leaveOneOutSample \"rswr\" sampleWithReplacement \"srswr\" simpleRandomSampleWithReplacement \"stratified_rswr\" stratifiedSampleWithReplacement \"balanced_rswr\" balancedSampleWithReplacement \"bootstrap\" bootstrapSample","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Sampling Function — getSamplingFunction","text":"","code":"f = getSamplingFunction(id = 'rswor')"},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunctionName.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Function Name — getSamplingFunctionName","title":"Sampling Function Name — getSamplingFunctionName","text":"function returns name sampling function input.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunctionName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Function Name — getSamplingFunctionName","text":"","code":"getSamplingFunctionName(   id = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\") )"},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunctionName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Function Name — getSamplingFunctionName","text":"character string, name random sampling function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingFunctionName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Function Name — getSamplingFunctionName","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sampling method id — getSamplingMethodId","title":"Get the sampling method id — getSamplingMethodId","text":"Get sampling method id resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sampling method id — getSamplingMethodId","text":"","code":"getSamplingMethodId(x)"},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sampling method id — getSamplingMethodId","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sampling method id — getSamplingMethodId","text":"character string, sampling method id.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodId.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the sampling method id — getSamplingMethodId","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodName.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Method Name — getSamplingMethodName","title":"Sampling Method Name — getSamplingMethodName","text":"function returns name sampling method input.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Method Name — getSamplingMethodName","text":"","code":"getSamplingMethodName(   id = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\") )"},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Method Name — getSamplingMethodName","text":"character string, name random sampling method.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getSamplingMethodName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Method Name — getSamplingMethodName","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getThisPackageName.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Name — getThisPackageName","title":"Package Name — getThisPackageName","text":"function returns name package.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getThisPackageName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Name — getThisPackageName","text":"","code":"getThisPackageName()"},{"path":"https://alebarberis.github.io/resampling/reference/getThisPackageName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package Name — getThisPackageName","text":"string containing name package.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/getThisPackageName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Package Name — getThisPackageName","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a resampling object — is.resampling","title":"Check a resampling object — is.resampling","text":"Function check object resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a resampling object — is.resampling","text":"","code":"is.resampling(x)"},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a resampling object — is.resampling","text":"x object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a resampling object — is.resampling","text":"Returns TRUE argument valid resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check a resampling object — is.resampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/is.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a resampling object — is.resampling","text":"","code":"#valid object is.resampling(x = resampling()) #> [1] TRUE  #invalid object is.resampling(x = 3) #> [1] FALSE"},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Folds Input Validator — isValidCvInput","title":"K-Folds Input Validator — isValidCvInput","text":"function checks input provided k-folds sampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Folds Input Validator — isValidCvInput","text":"","code":"isValidCvInput(N, k, strata, undersample, prob)"},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Folds Input Validator — isValidCvInput","text":"N population size k number folds strata vector stratification variables. population size length(strata) undersample logical, whether remove elements population order try obtain balanced folds prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Folds Input Validator — isValidCvInput","text":"TRUE arguments valid, string containing errors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-Folds Input Validator — isValidCvInput","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidCvInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Folds Input Validator — isValidCvInput","text":"","code":"if (FALSE) { #Valid input isValidCvInput(  strata=c(1,1,1,2,2,2,2,2,2),  k=3 )  #Invalid input isValidCvInput(  N=2,  k=1 )  isValidCvInput(  k=1 ) }"},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"function checks input provided leave-p-sampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"","code":"isValidLpOSampleInput(N, p, prob)"},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"N positive integer value, population size p integer, number elements holdout prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"TRUE arguments valid, string containing errors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidLpOSampleInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-p-out Sample Input Validator — isValidLpOSampleInput","text":"","code":"if (FALSE) {  #Valid input isValidLpOSampleInput(  N=10,  p=3 )  #Invalid input isValidLpOSampleInput(  N=10,  p=10 ) }"},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Input Validator — isValidSampleInput","title":"Sample Input Validator — isValidSampleInput","text":"function checks input provided random sampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Input Validator — isValidSampleInput","text":"","code":"isValidSampleInput(N, n, prob, replace)"},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Input Validator — isValidSampleInput","text":"n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata replace logical, whether sample replacement. Default FALSE","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Input Validator — isValidSampleInput","text":"TRUE arguments valid, string containing errors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample Input Validator — isValidSampleInput","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidSampleInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Input Validator — isValidSampleInput","text":"","code":"if (FALSE) { #Valid input isValidSampleInput(  N=10,  n=3 )  #Invalid input isValidSampleInput(  N=10,  n=11,  replace = FALSE ) }"},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Input Validator — isValidStratifiedSampleInput","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"function checks input provided random sampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"","code":"isValidStratifiedSampleInput(strata, n, prob, replace)"},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata replace logical, whether sample replacement. Default FALSE","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"TRUE arguments valid, string containing errors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/isValidStratifiedSampleInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Input Validator — isValidStratifiedSampleInput","text":"","code":"if (FALSE) { #Valid input isValidStratifiedSampleInput(  strata=c(1,1,1,2,2,2,2,2,2),  n=3 )  #Invalid input isValidStratifiedSampleInput(  n=11,  replace = FALSE ) }"},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"K-1 folds — km1Folds","title":"K-1 folds — km1Folds","text":"Takes population assigned k folds returns random sample made elements k-1 folds.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-1 folds — km1Folds","text":"","code":"km1Folds(foldid, i = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-1 folds — km1Folds","text":"foldid vector k fold ids (optional) integer, fold use holdout data","code":""},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-1 folds — km1Folds","text":"vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-1 folds — km1Folds","text":"returned sample vector indices generated removing holdout fold merging remaining k - 1 folds together. missing, one fold randomly selected holdout data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-1 folds — km1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/km1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-1 folds — km1Folds","text":"","code":"if (FALSE) { #set seed for reproducibility set.seed(seed = 5381L)  #Assign data to 3 folds km1Folds(  foldid = randomKFolds(N = 10, k = 3) ) }"},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-One-Out Sampling — leaveOneOutSample","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"Takes random sample size N-1 population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"","code":"leaveOneOutSample(N)"},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"N positive integer value, population size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"vector length N-1 containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"leave-one-particular case leave-p-, p = 1. random sample size 1 taken population used holdout data. function returns sample size N-1 obtained removing holdout sample population.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leaveOneOutSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-One-Out Sampling — leaveOneOutSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take one sample leaving out 1 element leaveOneOutSample(N = 10) #> [1]  2  3  4  5  6  7  8  9 10"},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-P-Out Sampling — leavePOutSample","title":"Leave-P-Out Sampling — leavePOutSample","text":"Takes random sample size N-p population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-P-Out Sampling — leavePOutSample","text":"","code":"leavePOutSample(N, p, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-P-Out Sampling — leavePOutSample","text":"N positive integer value, population size p integer, number elements holdout prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leave-P-Out Sampling — leavePOutSample","text":"vector length N-p containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leave-P-Out Sampling — leavePOutSample","text":"random sample size p taken population used holdout data. function returns sample size N-p obtained removing holdout sample population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Leave-P-Out Sampling — leavePOutSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/leavePOutSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-P-Out Sampling — leavePOutSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take one sample leaving out p elements leavePOutSample(N = 5, p = 2) #> [1] 2 3 4  #Equivalent to leave-one-out leavePOutSample(N = 5, p = 1) #> [1] 1 3 4 5"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethodIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","title":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","text":"function returns currently available random sampling methods.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethodIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","text":"","code":"listAvailableSamplingMethodIds(x = c(\"all\", \"rswor\", \"rswr\"))"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethodIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","text":"x character, whether return sampling methods () methods using sampling (rswr) without (rswor) replacement","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethodIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","text":"vector containing sampling method identifiers.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethodIds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Sampling Method IDs — listAvailableSamplingMethodIds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Sampling Methods — listAvailableSamplingMethods","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"function returns currently available random sampling methods.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"","code":"listAvailableSamplingMethods(x = c(\"all\", \"rswor\", \"rswr\"))"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"x character, whether return sampling methods () methods using sampling (rswr) without (rswor) replacement","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"data frame two columns: id id random sampling method, used function calls name name random sampling method","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingMethods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available Random Sampling Methods — listAvailableSamplingMethods","text":"","code":"listAvailableSamplingMethods() #>                   id                                           name #> 1              rswor            random sampling without replacement #> 2             srswor     simple random sampling without replacement #> 3   stratified_rswor stratified random sampling without replacement #> 4     balanced_rswor   balanced random sampling without replacement #> 5        permutation                           permutation sampling #> 6             kfolds                         random k-fold sampling #> 7  stratified_kfolds                     stratified k-fold sampling #> 8    balanced_kfolds                       balanced k-fold sampling #> 9        leave_p_out                           leave-p-out sampling #> 10     leave_one_out                         leave-one-out sampling #> 11              rswr               random sampling with replacement #> 12             srswr        simple random sampling with replacement #> 13   stratified_rswr    stratified random sampling with replacement #> 14     balanced_rswr      balanced random sampling with replacement #> 15         bootstrap                    ordinary bootstrap sampling"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithReplacementMethodIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Sampling With Replacement Method Ids — listAvailableSamplingWithReplacementMethodIds","title":"Available Random Sampling With Replacement Method Ids — listAvailableSamplingWithReplacementMethodIds","text":"function returns ids currently available methods random sampling replacement.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithReplacementMethodIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Sampling With Replacement Method Ids — listAvailableSamplingWithReplacementMethodIds","text":"","code":"listAvailableSamplingWithReplacementMethodIds()"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithReplacementMethodIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Sampling With Replacement Method Ids — listAvailableSamplingWithReplacementMethodIds","text":"vector containing sampling method identifiers.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithReplacementMethodIds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Sampling With Replacement Method Ids — listAvailableSamplingWithReplacementMethodIds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithoutReplacementMethodIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Sampling Without Replacement Method Ids — listAvailableSamplingWithoutReplacementMethodIds","title":"Available Random Sampling Without Replacement Method Ids — listAvailableSamplingWithoutReplacementMethodIds","text":"function returns ids currently available methods random sampling without replacement.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithoutReplacementMethodIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Sampling Without Replacement Method Ids — listAvailableSamplingWithoutReplacementMethodIds","text":"","code":"listAvailableSamplingWithoutReplacementMethodIds()"},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithoutReplacementMethodIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Sampling Without Replacement Method Ids — listAvailableSamplingWithoutReplacementMethodIds","text":"vector containing sampling method identifiers.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listAvailableSamplingWithoutReplacementMethodIds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Sampling Without Replacement Method Ids — listAvailableSamplingWithoutReplacementMethodIds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Resampling Functions — listResamplingFunctionNames","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"function returns currently available random resampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"","code":"listResamplingFunctionNames(x = c(\"all\", \"rswor\", \"rswr\"))"},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"x character, whether return sampling methods () methods using sampling (rswr) without (rswor) replacement","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"data frame two columns: id id random sampling method, used function calls name name random resampling function","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listResamplingFunctionNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available Random Resampling Functions — listResamplingFunctionNames","text":"","code":"listResamplingFunctionNames() #>                   id                                         name #> 1              rswor             repeatedSampleWithoutReplacement #> 2             srswor repeatedSimpleRandomSampleWithoutReplacement #> 3   stratified_rswor   repeatedStratifiedSampleWithoutReplacement #> 4     balanced_rswor     repeatedBalancedSampleWithoutReplacement #> 5        permutation                    repeatedPermutationSample #> 6             kfolds                       repeatedRandomKm1Folds #> 7  stratified_kfolds                   repeatedStratifiedKm1Folds #> 8    balanced_kfolds                     repeatedBalancedKm1Folds #> 9        leave_p_out                      repeatedLeavePOutSample #> 10     leave_one_out                    repeatedLeaveOneOutSample #> 11              rswr                repeatedSampleWithReplacement #> 12             srswr    repeatedSimpleRandomSampleWithReplacement #> 13   stratified_rswr      repeatedStratifiedSampleWithReplacement #> 14     balanced_rswr        repeatedBalancedSampleWithReplacement #> 15         bootstrap                      repeatedBootstrapSample"},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Random Sampling Functions — listSamplingFunctionNames","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"function returns currently available random sampling functions.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"","code":"listSamplingFunctionNames(x = c(\"all\", \"rswor\", \"rswr\"))"},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"x character, whether return sampling methods () methods using sampling (rswr) without (rswor) replacement","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"data frame two columns: id id random sampling method, used function calls name name random sampling function","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/listSamplingFunctionNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available Random Sampling Functions — listSamplingFunctionNames","text":"","code":"listSamplingFunctionNames() #>                   id                                 name #> 1              rswor             sampleWithoutReplacement #> 2             srswor simpleRandomSampleWithoutReplacement #> 3   stratified_rswor   stratifiedSampleWithoutReplacement #> 4     balanced_rswor     balancedSampleWithoutReplacement #> 5        permutation                    permutationSample #> 6             kfolds                       randomKm1Folds #> 7  stratified_kfolds                   stratifiedKm1Folds #> 8    balanced_kfolds                     balancedKm1Folds #> 9        leave_p_out                      leavePOutSample #> 10     leave_one_out                    leaveOneOutSample #> 11              rswr                sampleWithReplacement #> 12             srswr    simpleRandomSampleWithReplacement #> 13   stratified_rswr      stratifiedSampleWithReplacement #> 14     balanced_rswr        balancedSampleWithReplacement #> 15         bootstrap                      bootstrapSample"},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Strata to Colors — mapStrataToColors","title":"Map Strata to Colors — mapStrataToColors","text":"function maps strata variables colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Strata to Colors — mapStrataToColors","text":"","code":"mapStrataToColors(   strata,   pckg = c(\"auto\", \"RColorBrewer\", \"circlize\"),   rcolorbrewer = c(\"auto\", \"Blues\", \"BuGn\", \"BuPu\", \"GnBu\", \"Greens\", \"Greys\", \"Oranges\",     \"OrRd\", \"PuBu\", \"PuBuGn\", \"PuRd\", \"Purples\", \"RdPu\", \"Reds\", \"YlGn\", \"YlGnBu\",     \"YlOrBr\", \"YlOrRd\", \"Accent\", \"Dark2\", \"Paired\", \"Pastel1\", \"Pastel2\", \"Set1\",     \"Set2\", \"Set3\", \"BrBG\", \"PiYG\", \"PRGn\", \"PuOr\", \"RdBu\", \"RdGy\", \"RdYlBu\", \"RdYlGn\",     \"Spectral\"),   ... )"},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Strata to Colors — mapStrataToColors","text":"strata vector stratification variables pckg character, R package use generating colors rcolorbrewer character, RColorBrewer palette name. auto, automatic selection based number stratification variables made ... arguments rand_color","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Strata to Colors — mapStrataToColors","text":"vector colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map Strata to Colors — mapStrataToColors","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithCirclize.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Strata to Colors — mapStrataToColorsWithCirclize","title":"Map Strata to Colors — mapStrataToColorsWithCirclize","text":"function maps strata variables colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithCirclize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Strata to Colors — mapStrataToColorsWithCirclize","text":"","code":"mapStrataToColorsWithCirclize(strata, ...)"},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithCirclize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Strata to Colors — mapStrataToColorsWithCirclize","text":"strata vector stratification variables ... arguments rand_color","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithCirclize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Strata to Colors — mapStrataToColorsWithCirclize","text":"vector colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithCirclize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map Strata to Colors — mapStrataToColorsWithCirclize","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithColorBrewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","title":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","text":"function maps strata variables colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithColorBrewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","text":"","code":"mapStrataToColorsWithColorBrewer(   strata,   palette = c(\"auto\", \"Blues\", \"BuGn\", \"BuPu\", \"GnBu\", \"Greens\", \"Greys\", \"Oranges\",     \"OrRd\", \"PuBu\", \"PuBuGn\", \"PuRd\", \"Purples\", \"RdPu\", \"Reds\", \"YlGn\", \"YlGnBu\",     \"YlOrBr\", \"YlOrRd\", \"Accent\", \"Dark2\", \"Paired\", \"Pastel1\", \"Pastel2\", \"Set1\",     \"Set2\", \"Set3\", \"BrBG\", \"PiYG\", \"PRGn\", \"PuOr\", \"RdBu\", \"RdGy\", \"RdYlBu\", \"RdYlGn\",     \"Spectral\") )"},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithColorBrewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","text":"strata vector stratification variables palette character, RColorBrewer palette name. auto, automatic selection based number stratification variables made","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithColorBrewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","text":"vector colors.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/mapStrataToColorsWithColorBrewer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map Strata to Colors — mapStrataToColorsWithColorBrewer","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of the resampling Class — newResampling","title":"Constructor of the resampling Class — newResampling","text":"low-level constructor resampling class representing series samples repeatedly taken population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of the resampling Class — newResampling","text":"","code":"newResampling(   method = character(),   N = integer(),   removed = integer(),   samples = list(integer()) )"},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of the resampling Class — newResampling","text":"method character, id used sampling method N integer, population size removed integer, indices elements removed prior sampling samples list, element integer vector containing samples","code":""},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of the resampling Class — newResampling","text":"object class resampling.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor of the resampling Class — newResampling","text":"object class resampling named list 4 elements: method id used sampling method N size population samples taken. Elements population index 1 N removed (optional) vector indices elements removed population taking samples samples list samples repeatedly taken population. element list integer vector containing indices elements sampled population Functions facilitate access data stored resampling object available: ?getSamplingMethodId: returns sampling method id ?getPopulationSize: returns population size ?getRemovedElements: returns indices elements removed population ?getNumberOfSamples: returns number taken samples ?getSamples: returns list samples ?getSampleSize: returns vector integer values, size sample ?getHoldOutSample: returns list item integer vector containing indices elements sampled population ?getHoldOutSampleSize:returns vector integer values, size hold-sample useful functions include: print: print summary resampling object plot: plot samples taken population heatmap","code":""},{"path":"https://alebarberis.github.io/resampling/reference/newResampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructor of the resampling Class — newResampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Samples — permutationSample","title":"Permutation Samples — permutationSample","text":"Takes permutation sample. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Samples — permutationSample","text":"","code":"permutationSample(N)"},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Samples — permutationSample","text":"N positive integer value, population size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Samples — permutationSample","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Samples — permutationSample","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permutation Samples — permutationSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/permutationSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Samples — permutationSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Random sequence of N elements from 1 to N permutationSample(N = 10) #>  [1]  1  9  7  2  4  3  6 10  5  8"},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a resampling object — plot.resampling","title":"Plot a resampling object — plot.resampling","text":"Plot resampling object. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a resampling object — plot.resampling","text":"","code":"# S3 method for resampling plot(   x,   ...,   cell.width = grid::unit(10, \"mm\"),   cell.height = cell.width,   col = c(\"purple\", \"lightblue\", \"gray\"),   border = NA,   rect_gp = grid::gpar(col = \"white\"),   heatmap.legend.title = \"type\",   strata = NULL,   strata.col = NULL )"},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a resampling object — plot.resampling","text":"x object class resampling ... additional plot arguments cell.width, cell.height width height cells heatmap col length-3 vector containing colors heatmap border Whether draw border. value can logical string color. rect_gp Graphic parameters drawing rectangles (heatmap body). value specified gpar fill parameter ignored. heatmap.legend.title character string, title heatmap legend strata (optional) vector stratification variables strata.col (optional) vector colors stratification variables","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a resampling object — plot.resampling","text":"Heatmap-class object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a resampling object — plot.resampling","text":"function plot samples taken population heatmap row corresponds different sample, columns represent elements population. elements belong one following groups: sample: sample taken population holdout: data selected sample removed: data removed population considered sampling sampling technique allows replacement, number repetition shown cells heatmap. strata provided, annotation added heatmap.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plot.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a resampling object — plot.resampling","text":"","code":"#check needed package require(ComplexHeatmap, quietly = TRUE) #> ======================================== #> ComplexHeatmap version 2.14.0 #> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/ #> Github page: https://github.com/jokergoo/ComplexHeatmap #> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference #>  #> If you use it in published research, please cite either one: #> - Gu, Z. Complex Heatmap Visualization. iMeta 2022. #> - Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional  #>     genomic data. Bioinformatics 2016. #>  #>  #> The new InteractiveComplexHeatmap package can directly export static  #> complex heatmaps into an interactive Shiny app with zero effort. Have a try! #>  #> This message can be suppressed by: #>   suppressPackageStartupMessages(library(ComplexHeatmap)) #> ========================================  #resampling object x = resampling(  method = 'rswor',  N = 10,  samples = list(c(1,5,7), c(6,2,9)) )  #plot plot(x)   #plot with strata plot(x, strata = c(rep(\"a\", 5), rep(\"b\", 5)))"},{"path":"https://alebarberis.github.io/resampling/reference/plus-.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine samples from resampling objects — +.resampling","title":"Combine samples from resampling objects — +.resampling","text":"Combine list samples resampling objects obtained using sampling method population size.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plus-.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine samples from resampling objects — +.resampling","text":"","code":"# S3 method for resampling +(e1, e2)"},{"path":"https://alebarberis.github.io/resampling/reference/plus-.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine samples from resampling objects — +.resampling","text":"e1, e2 object class resampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plus-.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine samples from resampling objects — +.resampling","text":"object class resampling samples slot combination samples e1 e2.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/plus-.resampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine samples from resampling objects — +.resampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/print.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a resampling object — print.resampling","title":"Print a resampling object — print.resampling","text":"Print summary resampling object.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/print.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a resampling object — print.resampling","text":"","code":"# S3 method for resampling print(x, nrows = 5L, nchars = 10L, ...)"},{"path":"https://alebarberis.github.io/resampling/reference/print.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a resampling object — print.resampling","text":"x object class resampling nrows integer, number samples show. one value provided, indicates indices samples show nchars integer, maximum number characters show summary table ... additional print arguments","code":""},{"path":"https://alebarberis.github.io/resampling/reference/print.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a resampling object — print.resampling","text":"Silently return x.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/print.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a resampling object — print.resampling","text":"","code":"#resampling object x = resampling(  method = 'rswor',  N = 10,  samples = list(c(1,5,7), c(6,2,9)) )  #print print(x) #>  #> 2 samples taken from a population of 10 elements by using random #> sampling without replacement. #>  #>   sampleNumber  sample sampleSize holdoutSize #> 1            1 1, 5, 7          3           7 #> 2            2 6, 2, 9          3           7 #>"},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":null,"dir":"Reference","previous_headings":"","what":"Random K Folds — randomKFolds","title":"Random K Folds — randomKFolds","text":"Randomly assigns population k folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random K Folds — randomKFolds","text":"","code":"randomKFolds(N, k)"},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random K Folds — randomKFolds","text":"N population size k number folds","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random K Folds — randomKFolds","text":"vector length N containing fold ids.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random K Folds — randomKFolds","text":"element population randomly assigned one k folds. Internally, uses sample function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random K Folds — randomKFolds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKFolds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random K Folds — randomKFolds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Assign data to 3 folds randomKFolds(N = 10, k = 3) #>  [1] 1 3 1 2 1 3 3 1 2 2"},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"K-1 Random Folds — randomKm1Folds","title":"K-1 Random Folds — randomKm1Folds","text":"Randomly assigns population k folds returns random sample made elements k-1 folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-1 Random Folds — randomKm1Folds","text":"","code":"randomKm1Folds(k, N, i = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-1 Random Folds — randomKm1Folds","text":"k number folds N population size (optional) integer, fold use holdout data","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-1 Random Folds — randomKm1Folds","text":"list length k element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-1 Random Folds — randomKm1Folds","text":"element population randomly assigned one k folds using randomKFolds function. provided, indicates -th fold considered holdout data. missing, one fold randomly selected holdout data. random sample generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-1 Random Folds — randomKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-1 Random Folds — randomKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Assign data to 3 folds randomKm1Folds(N = 10, k = 3) #> [1]  2  4  6  7  9 10"},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Random Samples — randomSample","title":"Simple Random Samples — randomSample","text":"Takes simple random sample population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Random Samples — randomSample","text":"","code":"randomSample(N, n, replace = FALSE, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Random Samples — randomSample","text":"N positive integer value, population size n positive integer value, sample size replace logical, whether sample replacement. Default FALSE prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Random Samples — randomSample","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Random Samples — randomSample","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple Random Samples — randomSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/randomSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Random Samples — randomSample","text":"","code":"if (FALSE) { #Set seed for reproducibility set.seed(seed = 5381L)  #Simple random sample without replacement randomSample(N = 10, n = 5, replace = FALSE)  #Simple random sample with replacement randomSample(N = 10, n = 5, replace = TRUE) }"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"Takes repeated balanced samples population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"","code":"repeatedBalancedKm1Folds(k, strata, undersample = FALSE, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"k number folds strata vector stratification variables. population size length(strata) undersample logical, whether remove elements population order try obtain balanced folds prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"list length k element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"element population randomly assigned one k folds percentage stratum population balanced fold (see balancedKFolds function details). list length k created folds, -th item list vector indices generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated k-1 Balanced Folds — repeatedBalancedKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define balanced strata strata = c(rep(1,6),rep(2,6))  #Check ratio table(strata)/length(strata) #> strata #>   1   2  #> 0.5 0.5   #Assign data to 3 folds i = repeatedBalancedKm1Folds(  strata = strata,  k = 3 ) #Check indices i #> [[1]] #> [1]  1  4  5  6  7  8 10 11 #>  #> [[2]] #> [1]  2  3  4  6  8  9 11 12 #>  #> [[3]] #> [1]  1  2  3  5  7  9 10 12 #>  #Check ratio in the samples made of k-1 folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   1   2  #> 0.5 0.5  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   1   2  #> 0.5 0.5  table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>   1   2  #> 0.5 0.5   #Define unbalanced strata strata = c(rep(1,6),rep(2,12))  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = repeatedBalancedKm1Folds(  strata = strata,  k = 3,  undersample = TRUE ) #Check folds i #> [[1]] #> [1]  1  2  3  4  9 13 16 18 #>  #> [[2]] #> [1]  2  3  5  6  9 12 15 16 #>  #> [[3]] #> [1]  1  4  5  6 12 13 15 18 #>  #> attr(,\"removed.data\") #> [1]  7  8 10 11 14 17 #Check ratio in the samples made of k-1 folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   1   2  #> 0.5 0.5  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   1   2  #> 0.5 0.5  table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>   1   2  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"Takes repeated balanced samples replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"","code":"repeatedBalancedSampleWithReplacement(k, strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"k integer, number repeated samples generate strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"function takes repeated samples using replicate function balancedSampleWithReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Balanced Random Samples With Replacement — repeatedBalancedSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Balanced random samples i = repeatedBalancedSampleWithReplacement(   k = 2,   strata = strata,   n = 6 ) #Check ratio table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   a   b  #> 0.5 0.5  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"Takes repeated balanced samples without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"","code":"repeatedBalancedSampleWithoutReplacement(k, strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"k integer, number repeated samples generate strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"function takes repeated samples using replicate function balancedSampleWithoutReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBalancedSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Balanced Random Samples — repeatedBalancedSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Balanced random samples i = repeatedBalancedSampleWithoutReplacement(   k = 2,   strata = strata,   n = 6 ) #Check ratio table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>   a   b  #> 0.5 0.5  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>   a   b  #> 0.5 0.5"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Bootstrap Samples — repeatedBootstrapSample","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"Takes repeated samples replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"","code":"repeatedBootstrapSample(k, N, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"k integer, number repeated samples generate N positive integer value, population size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"function takes repeated samples using replicate function bootstrapSample sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedBootstrapSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Bootstrap Samples — repeatedBootstrapSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples with replacement repeatedBootstrapSample(  k = 2,  N = 10 ) #> [[1]] #>  [1]  1  9 10  3  4  1  9  8  1  7 #>  #> [[2]] #>  [1] 6 5 2 3 5 4 2 2 8 9 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated k-1 folds — repeatedKm1Folds","title":"Repeated k-1 folds — repeatedKm1Folds","text":"Takes population assigned k folds return list k unique samples made elements k-1 folds.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated k-1 folds — repeatedKm1Folds","text":"","code":"repeatedKm1Folds(foldid)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated k-1 folds — repeatedKm1Folds","text":"foldid vector k fold ids","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated k-1 folds — repeatedKm1Folds","text":"list length k element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated k-1 folds — repeatedKm1Folds","text":"list length k created folds, -th item list vector indices generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated k-1 folds — repeatedKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated k-1 folds — repeatedKm1Folds","text":"","code":"if (FALSE) { #set seed for reproducibility set.seed(seed = 5381L)  #Assign data to 3 folds repeatedKm1Folds(  foldid = randomKFolds(N = 10, k = 3) ) }"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Leave-One-Out — repeatedLeaveOneOut","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"Takes repeated samples population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"","code":"repeatedLeaveOneOut(N)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"N positive integer value, population size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"list length N element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"leave-one-particular case leave-p-, p = 1. Samples repeatedly taken population element population considered holdout data. function returns list N samples size N-1 obtained removing holdout samples population.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeaveOneOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Leave-One-Out — repeatedLeaveOneOut","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Assign data to N folds repeatedLeaveOneOut(N = 10) #> [[1]] #> [1]  2  3  4  5  6  7  8  9 10 #>  #> [[2]] #> [1]  1  2  3  5  6  7  8  9 10 #>  #> [[3]] #> [1]  1  2  3  4  5  7  8  9 10 #>  #> [[4]] #> [1]  1  2  3  4  6  7  8  9 10 #>  #> [[5]] #> [1]  1  2  3  4  5  6  7  8 10 #>  #> [[6]] #> [1]  1  2  3  4  5  6  8  9 10 #>  #> [[7]] #> [1]  1  2  4  5  6  7  8  9 10 #>  #> [[8]] #> [1] 1 2 3 4 5 6 7 8 9 #>  #> [[9]] #> [1]  1  3  4  5  6  7  8  9 10 #>  #> [[10]] #> [1]  1  2  3  4  5  6  7  9 10 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Leave-P-Out — repeatedLeavePOut","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"Takes repeated samples population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"","code":"repeatedLeavePOut(N, p)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"N positive integer value, population size p integer, number elements holdout","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"list length \\(\\binom{N}{p}\\) element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"Samples size p repeatedly taken population possible combinations p elements considered. samples used holdout data. function returns list \\(\\binom{N}{p} = \\frac{N!}{p!(N-p)!}\\) samples size N-p obtained removing holdout samples population.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedLeavePOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Leave-P-Out — repeatedLeavePOut","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Repeatedly sample leaving out p elements each time repeatedLeavePOut(N = 5, p = 2) #> [[1]] #> [1] 3 4 5 #>  #> [[2]] #> [1] 2 4 5 #>  #> [[3]] #> [1] 2 3 5 #>  #> [[4]] #> [1] 2 3 4 #>  #> [[5]] #> [1] 1 4 5 #>  #> [[6]] #> [1] 1 3 5 #>  #> [[7]] #> [1] 1 3 4 #>  #> [[8]] #> [1] 1 2 5 #>  #> [[9]] #> [1] 1 2 4 #>  #> [[10]] #> [1] 1 2 3 #>   #Equivalent to leave-one-out repeatedLeavePOut(N = 5, p = 1) #> [[1]] #> [1] 2 3 4 5 #>  #> [[2]] #> [1] 1 3 4 5 #>  #> [[3]] #> [1] 1 2 4 5 #>  #> [[4]] #> [1] 1 2 3 5 #>  #> [[5]] #> [1] 1 2 3 4 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Permutation Samples — repeatedPermutationSample","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"Takes repeated samples without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"","code":"repeatedPermutationSample(k, N)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"k integer, number repeated samples generate N positive integer value, population size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"function takes repeated samples using replicate function permutationSample sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedPermutationSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Permutation Samples — repeatedPermutationSample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples without replacement repeatedPermutationSample(  k = 2,  N = 10 ) #> [[1]] #>  [1]  1  9  7  2  4  3  6 10  5  8 #>  #> [[2]] #>  [1]  8  1  7  4  6  5 10  3  2  9 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"Takes repeated samples population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"","code":"repeatedRandomKm1Folds(k, N)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"k number folds N population size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"list length k element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"element population randomly assigned one k folds using randomKFolds function. list length k created folds, -th item list vector indices generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedRandomKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated k-1 Random Folds — repeatedRandomKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Assign data to 3 folds repeatedRandomKm1Folds(N = 10, k = 3) #> [[1]] #> [1]  2  4  6  7  9 10 #>  #> [[2]] #> [1] 1 2 3 5 6 7 8 #>  #> [[3]] #> [1]  1  3  4  5  8  9 10 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Samples — repeatedSample","title":"Repeated Samples — repeatedSample","text":"Takes repeated samples population using provided sampling function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Samples — repeatedSample","text":"","code":"repeatedSample(k = 1, sampleFun, ...)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Samples — repeatedSample","text":"k integer, number repeated samples generate sampleFun sampling function ... arguments sampleFun","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Samples — repeatedSample","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Samples — repeatedSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Samples — repeatedSample","text":"","code":"if (FALSE) { #set seed for reproducibility set.seed(seed = 5381L)  #Take two samples without replacement repeatedSample(  k = 2,  sampleFun = sampleWithoutReplacement,  N = 10,  n = 5 ) }"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"Takes repeated samples replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"","code":"repeatedSampleWithReplacement(k, N, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"k integer, number repeated samples generate N positive integer value, population size n positive integer value, sample size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"function takes repeated samples using replicate function sampleWithReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Random Samples With Replacement — repeatedSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples with replacement repeatedSampleWithReplacement(  k = 2,  N = 10,  n = 6 ) #> [[1]] #> [1]  1  9 10  3  4  1 #>  #> [[2]] #> [1] 9 8 1 7 6 5 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Random Samples — repeatedSampleWithoutReplacement","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"Takes repeated samples without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"","code":"repeatedSampleWithoutReplacement(k, N, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"k integer, number repeated samples generate N positive integer value, population size n positive integer value, sample size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"function takes repeated samples using replicate function sampleWithoutReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Random Samples — repeatedSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples without replacement repeatedSampleWithoutReplacement(  k = 2,  N = 10,  n = 6 ) #> [[1]] #> [1] 1 9 7 2 4 3 #>  #> [[2]] #> [1]  4  1  9  3  8 10 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"Takes repeated simple random samples replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"","code":"repeatedSimpleRandomSampleWithReplacement(k, N, n)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"k integer, number repeated samples generate N positive integer value, population size n positive integer value, sample size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"function takes repeated samples using replicate function simpleRandomSampleWithReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Simple Random Samples With Replacement — repeatedSimpleRandomSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples with replacement repeatedSimpleRandomSampleWithReplacement(  k = 2,  N = 10,  n = 6 ) #> [[1]] #> [1]  1  9 10  3  4  1 #>  #> [[2]] #> [1] 9 8 1 7 6 5 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"Takes repeated samples without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"","code":"repeatedSimpleRandomSampleWithoutReplacement(k, N, n)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"k integer, number repeated samples generate N positive integer value, population size n positive integer value, sample size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"function takes repeated samples using replicate function simpleRandomSampleWithoutReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedSimpleRandomSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Random Samples — repeatedSimpleRandomSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Take two samples without replacement repeatedSimpleRandomSampleWithoutReplacement(  k = 2,  N = 10,  n = 6 ) #> [[1]] #> [1] 1 9 7 2 4 3 #>  #> [[2]] #> [1]  4  1  9  3  8 10 #>"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"Takes repeated stratified samples population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"","code":"repeatedStratifiedKm1Folds(k, strata)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"k number folds strata vector stratification variables. population size length(strata)","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"list length k element vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"element population randomly assigned one k folds - percentage stratum population preserved fold - using stratifiedKFolds function. list length k created folds, -th item list vector indices generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated k-1 Stratified Folds — repeatedStratifiedKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(1,1,1,2,2,2,2,2,2)  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = repeatedStratifiedKm1Folds(  strata = strata,  k = 3 ) #Check indices i #> [[1]] #> [1] 1 3 4 5 7 8 #>  #> [[2]] #> [1] 2 3 4 6 8 9 #>  #> [[3]] #> [1] 1 2 5 6 7 9 #>  #Check ratio in the samples made of k-1 folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>         1         2  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"Takes repeated stratified samples replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"","code":"repeatedStratifiedSampleWithReplacement(k, strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"k integer, number repeated samples generate strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"function takes repeated samples using replicate function stratifiedSampleWithReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Stratified Random Samples With Replacement — repeatedStratifiedSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Stratified random samples i = repeatedStratifiedSampleWithReplacement(   k = 2,   strata = strata,   n = 3, ) #Check ratio table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         a         b  #> 0.3333333 0.6666667  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"Takes repeated stratified samples without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"","code":"repeatedStratifiedSampleWithoutReplacement(k, strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"k integer, number repeated samples generate strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"list length k element vector indices representing sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"function takes repeated samples using replicate function stratifiedSampleWithoutReplacement sampling function.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/repeatedStratifiedSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Stratified Random Samples — repeatedStratifiedSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Stratified random samples i = repeatedStratifiedSampleWithoutReplacement(   k = 2,   strata = strata,   n = 3, ) #Check ratio table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         a         b  #> 0.3333333 0.6666667  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample — resample","title":"Resample — resample","text":"Handler function providing easy access uniform syntax various implemented repeated sampling techniques. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample — resample","text":"","code":"resample(   x,   n,   k,   method = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\"),   prob = NULL,   undersample = FALSE )"},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample — resample","text":"x either integer representing population size, vector stratification variables n integer, either sample size number elements holdout k integer, number repeated samples generate. Used number folds k-fold sampling method character string, one supported sampling techniques prob (optional) vector positive numeric values, probability weights obtaining elements population. provided, length must match population size undersample logical, whether remove elements population order try obtain balanced data","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample — resample","text":"object class resampling.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample — resample","text":"function internally calls one implemented functions repeated sampling based value method argument: \"rswor\" repeatedSampleWithoutReplacement \"srswor\" repeatedSimpleRandomSampleWithoutReplacement \"stratified_rswor\" repeatedStratifiedSampleWithoutReplacement \"balanced_rswor\" repeatedBalancedSampleWithoutReplacement \"permutation\" repeatedPermutationSample \"kfolds\" repeatedRandomKm1Folds \"stratified_kfolds\" repeatedStratifiedKm1Folds \"balanced_kfolds\" repeatedBalancedKm1Folds \"leave_p_out\" repeatedLeavePOut \"leave_one_out\" repeatedLeaveOneOut \"rswr\" repeatedSampleWithReplacement \"srswr\" repeatedSimpleRandomSampleWithReplacement \"stratified_rswr\" repeatedStratifiedSampleWithReplacement \"balanced_rswr\" repeatedBalancedSampleWithReplacement \"bootstrap\" repeatedBootstrapSample See specific function help page details implemented methodology.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resample — resample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample — resample","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Random sampling without replacement resample(  x = 10,  n = 5,  k = 2,  method = \"rswor\" ) #>  #> 2 samples taken from a population of 10 elements by using random #> sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 9, 7, 2, ...          5           5 #> 2            2 3, 4, 1, 8, ...          5           5 #>   #Simple random sampling without replacement resample(  x = 10,  n = 5,  k = 2,  method = \"srswor\" ) #>  #> 2 samples taken from a population of 10 elements by using simple random #> sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 8, 1, 7, 4, ...          5           5 #> 2            2 5, 2, 8, 6, ...          5           5 #>   #Permutation resample(  x = 10,  k = 2,  method = \"permutation\" ) #>  #> 2 samples taken from a population of 10 elements by using permutation #> sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 5, 4, 8, 1, ...         10           0 #> 2            2 7, 10, 5, , ...         10           0 #>   #Stratified random sampling without replacement resample(  x = c(rep(\"a\", 3),rep(\"b\", 6)),  n = 6,  k = 2,  method = \"stratified_rswor\" ) #>  #> 2 samples taken from a population of 9 elements by using stratified #> random sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 7, 3, 4, 1, ...          6           3 #> 2            2 3, 1, 4, 9, ...          6           3 #>    #Balanced random sampling without replacement resample(  x = c(rep(\"a\", 3),rep(\"b\", 6)),  n = 6,  k = 2,  method = \"balanced_rswor\" ) #>  #> 2 samples taken from a population of 9 elements by using balanced #> random sampling without replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 3, 1, 8, 6, ...          6           3 #> 2            2 1, 9, 3, 8, ...          6           3 #>   #K-folds sampling resample(  x = 10,  k = 3,  method = \"kfolds\" ) #>  #> 3 samples taken from a population of 10 elements by using random k-fold #> sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 3, 4, 7, ...          6           4 #> 2            2 1, 2, 5, 6, ...          7           3 #> 3            3 2, 3, 4, 5, ...          7           3 #>   #Stratified k-folds sampling resample(  x = c(rep(\"a\", 3),rep(\"b\", 6)),  k = 3,  method = \"stratified_kfolds\" ) #>  #> 3 samples taken from a population of 9 elements by using stratified #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 3, 5, 7, ...          6           3 #> 2            2 1, 2, 4, 5, ...          6           3 #> 3            3 2, 3, 4, 6, ...          6           3 #>   #Balanced k-folds sampling (balanced population) resample(  x = c(rep(1,6),rep(2,6)),  k = 3,  method = \"balanced_kfolds\" ) #>  #> 3 samples taken from a population of 12 elements by using balanced #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 4, 5, 6, ...          8           4 #> 2            2 2, 3, 4, 5, ...          8           4 #> 3            3 1, 2, 3, 6, ...          8           4 #>   #Balanced k-folds sampling (unbalanced population) resample(  x = c(rep(1,6),rep(2,12)),  k = 3,  method = \"balanced_kfolds\",  undersample = TRUE ) #>  #> 3 samples taken from a population of 18 elements by using balanced #> k-fold sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 2, 3, 6, ...          8           4 #> 2            2 1, 4, 5, 6, ...          8           4 #> 3            3 2, 3, 4, 5, ...          8           4 #>   #Leave-p-out sampling resample(  x = 5,  n = 2,  method = \"leave_p_out\" ) #>  #> 10 samples taken from a population of 5 elements by using leave-p-out #> sampling. #>  #>   sampleNumber  sample sampleSize holdoutSize #> 1            1 3, 4, 5          3           2 #> 2            2 2, 4, 5          3           2 #> 3            3 2, 3, 5          3           2 #> 4            4 2, 3, 4          3           2 #> 5            5 1, 4, 5          3           2 #> ... #>   #Leave-one-out sampling resample(  x = 5,  method = \"leave_one_out\" ) #>  #> 5 samples taken from a population of 5 elements by using leave-one-out #> sampling. #>  #>   sampleNumber     sample sampleSize holdoutSize #> 1            1 1, 2, 3, 5          4           1 #> 2            2 2, 3, 4, 5          4           1 #> 3            3 1, 2, 3, 4          4           1 #> 4            4 1, 2, 4, 5          4           1 #> 5            5 1, 3, 4, 5          4           1 #>   #Random sampling with replacement resample(  x = 10,  n = 5,  k = 2,  method = \"rswr\" ) #>  #> 2 samples taken from a population of 10 elements by using random #> sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 10, 6, 6, , ...          5           8 #> 2            2 8, 1, 9, 2, ...          5           5 #>   #Simple random sampling with replacement resample(  x = 10,  n = 5,  k = 2,  method = \"srswr\" ) #>  #> 2 samples taken from a population of 10 elements by using simple random #> sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 9, 7, 1, ...          5           6 #> 2            2 2, 4, 10, , ...          5           6 #>   #Stratified random sampling with replacement resample(  x = c(rep(\"a\", 3),rep(\"b\", 6)),  n = 6,  k = 2,  method = \"stratified_rswr\" ) #>  #> 2 samples taken from a population of 9 elements by using stratified #> random sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 1, 8, 8, 8, ...          6           5 #> 2            2 5, 6, 6, 3, ...          6           4 #>    #Balanced random sampling with replacement resample(  x = c(rep(\"a\", 3),rep(\"b\", 6)),  n = 6,  k = 2,  method = \"balanced_rswr\" ) #>  #> 2 samples taken from a population of 9 elements by using balanced #> random sampling with replacement. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 4, 9, 2, 1, ...          6           5 #> 2            2 2, 1, 7, 5, ...          6           4 #>   #Bootstrap sampling resample(  x = 10,  k = 2,  method = \"bootstrap\" ) #>  #> 2 samples taken from a population of 10 elements by using ordinary #> bootstrap sampling. #>  #>   sampleNumber          sample sampleSize holdoutSize #> 1            1 7, 5, 3, 6, ...         10           2 #> 2            2 4, 6, 1, 7, ...         10           4 #>"},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of the resampling class — resampling","title":"Constructor of the resampling class — resampling","text":"constructor resampling class.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of the resampling class — resampling","text":"","code":"resampling(   method = c(\"rswor\", \"srswor\", \"stratified_rswor\", \"balanced_rswor\", \"permutation\",     \"kfolds\", \"stratified_kfolds\", \"balanced_kfolds\", \"leave_p_out\", \"leave_one_out\",     \"rswr\", \"srswr\", \"stratified_rswr\", \"balanced_rswr\", \"bootstrap\"),   N = integer(),   removed = integer(),   samples = list(integer()) )"},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of the resampling class — resampling","text":"method character, id used sampling method N integer, population size removed integer, indices elements removed prior sampling samples list, element integer vector containing samples","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of the resampling class — resampling","text":"object class resampling.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor of the resampling class — resampling","text":"object class resampling named list 4 elements: method id used sampling method N size population samples taken. Elements population index 1 N removed (optional) vector indices elements removed population taking samples samples list samples repeatedly taken population. element list integer vector containing indices elements sampled population Functions facilitate access data stored resampling object available: ?getSamplingMethodId: returns sampling method id ?getPopulationSize: returns population size ?getRemovedElements: returns indices elements removed population ?getNumberOfSamples: returns number taken samples ?getSamples: returns list samples ?getSampleSize: returns vector integer values, size sample ?getHoldOutSample: returns list item integer vector containing indices elements sampled population ?getHoldOutSampleSize:returns vector integer values, size hold-sample useful functions include: print: print summary resampling object plot: plot samples taken population heatmap","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructor of the resampling class — resampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor of the resampling class — resampling","text":"","code":"#default resampling() #>  #> 1 samples taken from a population of elements by using random sampling #> without replacement. #>  #>   sampleNumber sample sampleSize holdoutSize #> 1            1                 0           0 #>   #resampling object resampling(  method = 'rswor',  N = 10,  samples = list(c(1,5,7)) ) #>  #> 1 samples taken from a population of 10 elements by using random #> sampling without replacement. #>  #>   sampleNumber  sample sampleSize holdoutSize #> 1            1 1, 5, 7          3           7 #>"},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample With Replacement — sampleWithReplacement","title":"Sample With Replacement — sampleWithReplacement","text":"Takes sample replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample With Replacement — sampleWithReplacement","text":"","code":"sampleWithReplacement(N, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample With Replacement — sampleWithReplacement","text":"N positive integer value, population size n positive integer value, sample size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample With Replacement — sampleWithReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample With Replacement — sampleWithReplacement","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample With Replacement — sampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample With Replacement — sampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Random sample with replacement sampleWithReplacement(N = 10, n = 10) #>  [1]  1  9 10  3  4  1  9  8  1  7"},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Samples — sampleWithoutReplacement","title":"Random Samples — sampleWithoutReplacement","text":"Takes sample without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Samples — sampleWithoutReplacement","text":"","code":"sampleWithoutReplacement(N, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Samples — sampleWithoutReplacement","text":"N positive integer value, population size n positive integer value, sample size prob (optional) N-length vector positive numeric values, probability weights obtaining N elements","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Samples — sampleWithoutReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Samples — sampleWithoutReplacement","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Samples — sampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/sampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Samples — sampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Simple random sample without replacement sampleWithoutReplacement(N = 10, n = 5) #> [1] 1 9 7 2 4"},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"Takes simple random sample replacement population. Simple random sampling (SRS) easiest form sampling element population probability selected sample. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"","code":"simpleRandomSampleWithReplacement(N, n)"},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"N positive integer value, population size n positive integer value, sample size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Random Sample With Replacement — simpleRandomSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Random sample with replacement simpleRandomSampleWithReplacement(N = 10, n = 10) #>  [1]  1  9 10  3  4  1  9  8  1  7"},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Samples — simpleRandomSampleWithoutReplacement","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"Takes simple random sample without replacement population. Simple random sampling (SRS) easiest form sampling element population probability selected sample. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"","code":"simpleRandomSampleWithoutReplacement(N, n)"},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"N positive integer value, population size n positive integer value, sample size","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"function wrapper sample.int function.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/simpleRandomSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Samples — simpleRandomSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Simple random sample without replacement simpleRandomSampleWithoutReplacement(N = 10, n = 5) #> [1] 1 9 7 2 4"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified K Folds — stratifiedKFolds","title":"Stratified K Folds — stratifiedKFolds","text":"Assigns population k stratified folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified K Folds — stratifiedKFolds","text":"","code":"stratifiedKFolds(strata = NULL, k)"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified K Folds — stratifiedKFolds","text":"strata vector stratification variables. population size length(strata) k number folds","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified K Folds — stratifiedKFolds","text":"vector length length(strata) containing fold ids.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stratified K Folds — stratifiedKFolds","text":"element population assigned one k folds percentage stratum population preserved fold.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stratified K Folds — stratifiedKFolds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKFolds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified K Folds — stratifiedKFolds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(1,1,1,2,2,2,2,2,2)  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = stratifiedKFolds(  strata = strata,  k = 3 ) #Check folds i #> [1] 2 1 3 3 2 1 2 3 1 #Check ratio in the folds table(strata[i==1])/length(strata[i==1]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i==2])/length(strata[i==2]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i==3])/length(strata[i==3]) #>  #>         1         2  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":null,"dir":"Reference","previous_headings":"","what":"K-1 Stratified Folds — stratifiedKm1Folds","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"Assigns population k stratified folds returns random sample made elements k-1 folds. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"","code":"stratifiedKm1Folds(k, strata, i = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"k number folds strata vector stratification variables. population size length(strata) (optional) integer, fold use holdout data","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"vector containing indices sampled data.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"element population randomly assigned one k folds - percentage stratum population preserved fold - using stratifiedKFolds function. provided, indicates -th fold considered holdout data. missing, one fold randomly selected holdout data. random sample generated removing -th fold merging remaining k - 1 folds together.","code":""},{"path":[]},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedKm1Folds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-1 Stratified Folds — stratifiedKm1Folds","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(1,1,1,2,2,2,2,2,2)  #Check ratio table(strata)/length(strata) #> strata #>         1         2  #> 0.3333333 0.6666667   #Assign data to 3 folds i = repeatedStratifiedKm1Folds(  strata = strata,  k = 3 ) #Check indices i #> [[1]] #> [1] 1 3 4 5 7 8 #>  #> [[2]] #> [1] 2 3 4 6 8 9 #>  #> [[3]] #> [1] 1 2 5 6 7 9 #>  #Check ratio in the samples made of k-1 folds table(strata[i[[1]]])/length(strata[i[[1]]]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i[[2]]])/length(strata[i[[2]]]) #>  #>         1         2  #> 0.3333333 0.6666667  table(strata[i[[3]]])/length(strata[i[[3]]]) #>  #>         1         2  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified Random Samples — stratifiedSample","title":"Stratified Random Samples — stratifiedSample","text":"Takes stratified sample without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified Random Samples — stratifiedSample","text":"","code":"stratifiedSample(strata, n, replace = FALSE, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified Random Samples — stratifiedSample","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size replace logical, whether sample replacement. Default FALSE prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified Random Samples — stratifiedSample","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stratified Random Samples — stratifiedSample","text":"Stratified sampling technique sampling population can partitioned 'strata' ('subpopulations'), element population part one one stratum. used ensure subgroups population represented taken sample. function implements -called \"proportionate allocation\", proportion strata population maintained samples.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stratified Random Samples — stratifiedSample","text":"https://en.wikipedia.org/wiki/Stratified_sampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stratified Random Samples — stratifiedSample","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified Random Samples — stratifiedSample","text":"","code":"if (FALSE) { #Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata)  #Stratified random sample without replacement i = stratifiedSample(   strata = strata,   n = 3,   replace = FALSE ) #Check ratio in the sample table(strata[i])/length(strata[i])  #Stratified random sample with replacement i = stratifiedSample(   strata = strata,   n = 3,   replace = TRUE ) #Check ratio in the sample table(strata[i])/length(strata[i]) }"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"Takes stratified sample replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"","code":"stratifiedSampleWithReplacement(strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"Stratified sampling technique sampling population can partitioned 'strata' ('subpopulations'), element population part one one stratum. used ensure subgroups population represented taken sample. function implements -called \"proportionate allocation\", proportion strata population maintained samples.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"https://en.wikipedia.org/wiki/Stratified_sampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified Random Sample With Replacement — stratifiedSampleWithReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Stratified random sample with replacement i = stratifiedSampleWithReplacement(   strata = strata,   n = 3 ) #Check indices i #> [1] 5 4 1 #Check ratio in the sample table(strata[i])/length(strata[i]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified Random Samples — stratifiedSampleWithoutReplacement","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"Takes stratified sample without replacement population. See Details section information.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"","code":"stratifiedSampleWithoutReplacement(strata, n, prob = NULL)"},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"strata vector stratification variables. population size length(strata) n positive integer value, sample size prob (optional) vector positive numeric values, probability weights obtaining strata elements. provided, must length strata","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"vector length n containing index computed random set observations.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"Stratified sampling technique sampling population can partitioned 'strata' ('subpopulations'), element population part one one stratum. used ensure subgroups population represented taken sample. function implements -called \"proportionate allocation\", proportion strata population maintained samples.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"https://en.wikipedia.org/wiki/Stratified_sampling","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/stratifiedSampleWithoutReplacement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified Random Samples — stratifiedSampleWithoutReplacement","text":"","code":"#Set seed for reproducibility set.seed(seed = 5381L)  #Define strata strata = c(rep(\"a\", 3),rep(\"b\", 6))  #Check ratio table(strata)/length(strata) #> strata #>         a         b  #> 0.3333333 0.6666667   #Stratified random sample i = stratifiedSampleWithoutReplacement(   strata = strata,   n = 3 ) #Check indices i #> [1] 5 4 1 #Check ratio in the sample table(strata[i])/length(strata[i]) #>  #>         a         b  #> 0.3333333 0.6666667"},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator of resampling Objects — validateResampling","title":"Validator of resampling Objects — validateResampling","text":"validator resampling objects.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator of resampling Objects — validateResampling","text":"","code":"validateResampling(x)"},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator of resampling Objects — validateResampling","text":"x resampling object","code":""},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator of resampling Objects — validateResampling","text":"object class resampling.","code":""},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validator of resampling Objects — validateResampling","text":"Alessandro Barberis","code":""},{"path":"https://alebarberis.github.io/resampling/reference/validateResampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validator of resampling Objects — validateResampling","text":"","code":"if (FALSE) { #No error is raised validateResampling(newResampling())  #An error is raised validateResampling( newResampling(  method = 'random',  N = 3,  samples = list(c(1, 4)) ) ) }"},{"path":[]},{"path":"https://alebarberis.github.io/resampling/news/index.html","id":"changes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Changes","title":"resampling 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
